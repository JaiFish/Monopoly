{
  "__type__": "cc.TextAsset",
  "_name": "fcc-framework.d",
  "_objFlags": 0,
  "_native": "",
  "text": "/// <reference types=\"../@types/creator\" />\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 各種錯誤類型\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum ErrorType {\r\n            /**\r\n             * 參數錯誤\r\n             * @type {ErrorType.TYPE_FW}\r\n             */\r\n            TYPE_FW = \"\\u50B3\\u5165\\u7684Type \\u932F\\u8AA4 ,\\u8ACB\\u6AA2\\u5BDF\\u8A72Type\\u662F\\u5426\\u975EFarmWork\\u5167\\u7684Type\",\r\n            /**\r\n             * 執行流程錯誤\r\n             * @type {ErrorType.IS_RUNNING_FW}\r\n             */\r\n            IS_RUNNING_FW = \"\\u904A\\u6232\\u6B63\\u5728\\u57F7\\u884C\\u4E2D,\\u8ACB\\u52FF\\u91CD\\u8907\\u547C\\u53EB\",\r\n            /**\r\n             * 空變數錯誤\r\n             * @type {ErrorType.UNDEFINED_FW}\r\n             */\r\n            UNDEFINED_FW = \"\\u8B8A\\u6578\\u70BAundefined,\\u6D41\\u7A0B\\u7121\\u6CD5\\u7E7C\\u7E8C\",\r\n            /**\r\n             * 加載資源類有錯誤\r\n             * @type {ErrorType.LOAD_FW}\r\n             */\r\n            LOAD_FW = \"\\u52A0\\u8F09\\u7684\\u8CC7\\u6E90\\u6709\\u554F\\u984C\",\r\n            /**\r\n             * 動畫類有錯誤\r\n             * @type {ErrorType.ANIMATION_FW}\r\n             */\r\n            ANIMATION_FW = \"Animation \\u985E\\u4E2D\\u65B9\\u6CD5\\u6709\\u932F\\u8AA4 : \",\r\n            /**\r\n             * server 請求錯誤\r\n             * @type {ErrorType.WEB_REQUEST_FW}\r\n             */\r\n            WEB_REQUEST_FW = \"WebRequest \\u985E\\u6709\\u932F\\u8AA4 : \",\r\n            /**\r\n             * server 響應錯誤\r\n             * @type {ErrorType.WEB_RESPONSE_FW}\r\n             */\r\n            WEB_RESPONSE_FW = \"WebResponse \\u985E\\u6709\\u932F\\u8AA4 : \",\r\n            /**\r\n             * 音樂類錯誤\r\n             * @type {ErrorType.AUDIO_FW}\r\n             */\r\n            AUDIO_FW = \"AUDIO \\u985E\\u6709\\u932F\\u8AA4 :\",\r\n            /**\r\n             * 場景類錯誤\r\n             * @type {ErrorType.SCENE_FW}\r\n             */\r\n            SCENE_FW = \"Scene \\u985E\\u6709\\u932F\\u8AA4 :\",\r\n            /**\r\n             * 流程類錯誤\r\n             * @type {ErrorType.PROCESS_FW}\r\n             */\r\n            PROCESS_FW = \"process \\u985E\\u6709\\u932F\\u8AA4 :\",\r\n            /**\r\n             * 監聽事件類有錯誤\r\n             * @type {ErrorType.LISTENER_FW}\r\n             */\r\n            LISTENER_FW = \"Event \\u985E\\u6709\\u932F\\u8AA4 :\",\r\n            /**\r\n             * 老虎機樣式類有錯誤\r\n             * @type {ErrorType.SLOT_STYLE_FW}\r\n             */\r\n            SLOT_STYLE_FW = \"SlotStyleFW\\u985E\\u6709\\u932F\\u8AA4 :\",\r\n            /**\r\n             * 模板類有錯誤\r\n             */\r\n            TEMPLATE_FW = \"\\u6A21\\u677F\\u985E\\u6709\\u932F\\u8AA4 :\"\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 無從判斷該錯誤類型\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class UnknownError {\r\n        private configManager;\r\n        constructor(configManager: IF.IConfigManager);\r\n        checkErrorType(message?: string | type.ErrorType, obj?: any): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 檢測該錯誤是否為框架錯誤\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class FrameWorkError {\r\n        private unknownError;\r\n        private configManager;\r\n        constructor(configManager: IF.IConfigManager);\r\n        checkErrorType(message: string | type.ErrorType, obj: any): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 檢測該錯誤是否為物件錯誤\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class ObjectError {\r\n        private frameWorkError;\r\n        constructor(configManager: IF.IConfigManager);\r\n        checkErrorType(message: string | type.ErrorType, obj?: any): any;\r\n        checkObjectType(obj: any): \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 顯示server回傳的錯誤\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class ServerError implements IF.IShowErrorDialog {\r\n        private timeOut;\r\n        private errorManager;\r\n        constructor(errorManager: IF.IErrorManager);\r\n        /**\r\n         *  顯示server回傳的錯誤事件\r\n         * @param {boolean} permanentState - 是否持續顯示\r\n         * @param {string} message - 顯示錯誤訊息文字\r\n         * @param {string} buttonText - 按鈕文字\r\n         * @param {string} canShowButton : 是否強制顯示Button\r\n         */\r\n        showError(permanentState: boolean, message: string, buttonText: string, canShowButton?: boolean): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 顯示警告錯誤\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class WarningError implements IF.IShowErrorDialog {\r\n        private timeout;\r\n        private errorManager;\r\n        constructor(errorManager: IF.IErrorManager);\r\n        /**\r\n         * 顯示警告 Dialog\r\n         * @param {boolean} permanentState - 是否持續顯示\r\n         * @param {string} message - 顯示錯誤訊息文字\r\n         * @param {string} buttonText - 按鈕文字\r\n         */\r\n        showError(permanentState: boolean, message: string, buttonText: string): void;\r\n        /**\r\n         * XXX :\r\n         * 當前暫時無使用,一樣保留\r\n         * 顯示金額不足無法下注\r\n         * @param obj 顯示在label的文字\r\n         */\r\n        showErrorBet(obj: string): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)Error管理器 錯誤事件中介者\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IErrorHandler {\r\n            /**\r\n             * 確認錯誤類型\r\n             * @summary - 責任鏈模式 : Overload\r\n             * @throws (null,any) - return 該物件 or throw (\"該物件為null\")\r\n             * ```\r\n             *      參數:\r\n             *          (null,any) - return 該物件 or throw (\"該物件為null\")\r\n             *          (fcc.type.ErrorType,string) - throw (`ErrorType + ${string}`)\r\n             *          (string) - throw (`${string}`)\r\n             * ```\r\n             * @param {string | fcc.type.ErrorType} message\r\n             * @param obj\r\n             */\r\n            checkErrorType(message?: string | type.ErrorType, obj?: any): any;\r\n            /**\r\n             * 確認server回傳錯誤類型\r\n             * @param {boolean} permanentState - 是否持續顯示\r\n             * @param {string} message - 顯示錯誤訊息文字\r\n             * @param {string} buttonText - 按鈕文字\r\n             * @param {string} canShowButton : 是否強制顯示Button\r\n             */\r\n            checkServerError(permanentState: boolean, message: string, buttonText?: string, canShowButton?: boolean): void;\r\n            /**\r\n             * 確認警告類型\r\n             * @param {boolean} permanentState - 是否持續顯示\r\n             * @param {string} message - 顯示錯誤訊息文字\r\n             * @param {string} buttonText - 按鈕文字\r\n             */\r\n            checkWarning(permanentState: boolean, message: string, buttonText?: string): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description Error管理器 錯誤事件中介者\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class ErrorHandler implements IF.IErrorHandler {\r\n        private objectError;\r\n        private serverError;\r\n        private warningError;\r\n        constructor(configManager: IF.IConfigManager, errorManager: IF.IErrorManager);\r\n        /**\r\n         * 確認錯誤類型\r\n         * @summary - 責任鏈模式 : Overload\r\n         * @throws (null,any) - return 該物件 or throw (\"該物件為null\")\r\n         * ```\r\n         *      參數:\r\n         *          (null,any) - return 該物件 or throw (\"該物件為null\")\r\n         *          (fcc.type.ErrorType,string) - throw (`ErrorType + ${string}`)\r\n         *          (string) - throw (`${string}`)\r\n         * ```\r\n         * @param {string | fcc.type.ErrorType} message\r\n         * @param obj\r\n         */\r\n        checkErrorType(message: string | type.ErrorType, obj?: any): any;\r\n        /**\r\n         * 確認server回傳錯誤類型\r\n         * @param {boolean} permanentState - 是否持續顯示\r\n         * @param {string} message - 顯示錯誤訊息文字\r\n         * @param {string} buttonText - 按鈕文字\r\n         * @param {string} canShowButton : 是否強制顯示Button\r\n         */\r\n        checkServerError(permanentState: boolean, message: string, buttonText?: string, canShowButton?: boolean): void;\r\n        /**\r\n         * 確認警告類型\r\n         * @param {boolean} permanentState - 是否持續顯示\r\n         * @param {string} message - 顯示錯誤訊息文字\r\n         * @param {string} buttonText - 按鈕文字\r\n         */\r\n        checkWarning(permanentState: boolean, message: string, buttonText?: string): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面) 錯誤訊息管理器\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IErrorManager {\r\n            /**\r\n             * 綁定要顯示Error組件的物件\r\n             */\r\n            errorNode: cc.Node;\r\n            /**\r\n             *綁定警告訊息\r\n             */\r\n            warningNode: cc.Node;\r\n            /**\r\n             *綁定ErrorButton\r\n             */\r\n            errorButton: cc.Node;\r\n            /**\r\n             * 綁定警告要顯示的錯誤訊息\r\n             */\r\n            warningLabel: cc.Label;\r\n            /**\r\n             * 綁定要顯示錯誤訊息的Label\r\n             */\r\n            errorLabel: cc.Label;\r\n            /**\r\n             * 綁定錯誤訊息的按鈕\r\n             */\r\n            errorButtonLabel: cc.Label;\r\n            /**\r\n             * 顯示要顯示錯誤訊息的時間\r\n             */\r\n            errorDelayTime: number;\r\n            /**\r\n             * 顯示警告訊息的時間\r\n             */\r\n            warningDelayTime: number;\r\n            /**\r\n             * 是否顯示返回Button\r\n             */\r\n            isShowBackHomeButton: boolean;\r\n            /**\r\n             * 執行該類型之錯誤提示\r\n             * @summary - 責任鏈模式 : Overload\r\n             * @throws (null,any) - return 該物件 or throw (\"該物件為null\")\r\n             * ```\r\n             *      參數:\r\n             *          (null,any) - return 該物件 or throw (\"該物件為null\")\r\n             *          (fcc.type.ErrorType,string) - throw (`ErrorType + ${string}`)\r\n             *          (string) - throw (`${string}`)\r\n             * ```\r\n             * @param {string | fcc.type.ErrorType} message\r\n             * @param obj\r\n             */\r\n            executeError(message: string | type.ErrorType, obj?: any): void;\r\n            /**\r\n             * 顯示錯誤視窗\r\n             * @param {boolean} permanentState : 是否常駐\r\n             * @param {string} message  : 錯誤訊息\r\n             * @param {string} buttonText : button文字\r\n             * @param {string} canShowButton : 是否強制顯示Button\r\n             */\r\n            showErrorDialog(permanentState: boolean, message: string, buttonText?: string, canShowButton?: boolean): void;\r\n            /**\r\n             * 顯示警告,將會調用已保存的警告Node\r\n             * @param {boolean} permanentState : 是否常駐\r\n             * @param {string} message  : 錯誤訊息\r\n             * @param {string} buttonText : button文字\r\n             */\r\n            showWarningDialog(permanentState: boolean, message: string, buttonText?: string): void;\r\n            /**\r\n             * 添加要綁定的Error組件\r\n             * @param node\r\n             */\r\n            setErrorNode(node: cc.Node): this;\r\n            /**\r\n             * 添加要顯示Error訊息的Label\r\n             * @param label\r\n             */\r\n            setErrorLabel(label: cc.Label): this;\r\n            /**\r\n             * 添加errorButton綁定\r\n             * @param node\r\n             */\r\n            setErrorButton(node: cc.Node): this;\r\n            /**\r\n             * 添加要顯示的時間,目前只對(ErrorType.bet)生效\r\n             * @param time\r\n             */\r\n            setErrorDelayTime(time: number): this;\r\n            /**\r\n             * 添加警告要顯示的時間\r\n             */\r\n            setWarningDelayTime(time: number): this;\r\n            /**\r\n             * 添加要顯示警告的Node\r\n             * @param node\r\n             */\r\n            setWarningNode(node: cc.Node): this;\r\n            /**\r\n             * 添加要顯示警告的Node\r\n             * @param label\r\n             */\r\n            setWarningLabel(label: cc.Label): this;\r\n            /**\r\n             * 添加要顯示錯誤視窗中按鈕的label\r\n             * @param {cc.Label} label\r\n             * @return {this}\r\n             */\r\n            setErrorButtonLabel(label: cc.Label): this;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 錯誤管理器 : 框架錯誤管理\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class ErrorManager implements IF.IErrorManager {\r\n        private static _instance;\r\n        private static _errorState;\r\n        private static _warningState;\r\n        private configManager;\r\n        private handler;\r\n        private _errorDelayTime;\r\n        private _errorLabel;\r\n        private _errorNode;\r\n        private _warningLabel;\r\n        private _warningNode;\r\n        private readonly _isShowBackHomeButton;\r\n        private _errorButton;\r\n        private _errorButtonLabel;\r\n        private _warningDelayTime;\r\n        private constructor();\r\n        /**\r\n         *  懶漢加載\r\n         *  初始化,只讓一個專案產生一次該class\r\n         */\r\n        static setInstance(configManager: IF.IConfigManager): void;\r\n        /**\r\n         *  獲取已經初始化的靜態實例class\r\n         */\r\n        static get instance(): IF.IErrorManager;\r\n        /**\r\n         * 執行該類型之錯誤提示\r\n         * @summary - 責任鏈模式 : Overload\r\n         * @throws (null,any) - return 該物件 or throw (\"該物件為null\")\r\n         * ```\r\n         *      參數:\r\n         *          (null,any) - return 該物件 or throw (\"該物件為null\")\r\n         *          (fcc.type.ErrorType,string) - throw (`ErrorType + ${string}`)\r\n         *          (string) - throw (`${string}`)\r\n         * ```\r\n         * @param {string | fcc.type.ErrorType} message\r\n         * @param obj\r\n         */\r\n        executeError(message: string | type.ErrorType, obj: any): any;\r\n        /**\r\n         * 顯示錯誤視窗\r\n         * @param {boolean} permanentState - 是否常駐\r\n         * @param {string} message  - 錯誤訊息\r\n         * @param {string} buttonText - button文字\r\n         * @param {string} canShowButton : 是否強制顯示Button\r\n         */\r\n        showErrorDialog(permanentState: boolean, message: string, buttonText?: string, canShowButton?: boolean): void;\r\n        /**\r\n         * 顯示警告,將會調用已保存的警告Node\r\n         * @param {boolean} permanentState - 是否常駐\r\n         * @param {string} message  - 錯誤訊息\r\n         * @param {string} buttonText - button文字\r\n         */\r\n        showWarningDialog(permanentState: boolean, message: string, buttonText?: string): void;\r\n        /**\r\n         * 添加要綁定的Error組件\r\n         * @param node\r\n         */\r\n        setErrorNode(node: cc.Node): this;\r\n        /**\r\n         * 添加要顯示Error訊息的Label\r\n         * @param label\r\n         */\r\n        setErrorLabel(label: cc.Label): this;\r\n        /**\r\n         * 添加errorButton綁定\r\n         * @param node\r\n         */\r\n        setErrorButton(node: cc.Node): this;\r\n        /**\r\n         * 添加要顯示的時間,目前只對(ErrorType.bet)生效\r\n         * @param time\r\n         */\r\n        setErrorDelayTime(time: number): this;\r\n        /**\r\n         * 添加警告要顯示的時間\r\n         */\r\n        setWarningDelayTime(time: number): this;\r\n        /**\r\n         * 添加要顯示警告的Node\r\n         * @param node\r\n         */\r\n        setWarningNode(node: cc.Node): this;\r\n        /**\r\n         * 添加要顯示警告的Node\r\n         * @param label\r\n         */\r\n        setWarningLabel(label: cc.Label): this;\r\n        /**\r\n         * 添加要顯示錯誤視窗中按鈕的label\r\n         * @param {cc.Label} label\r\n         * @return {this}\r\n         */\r\n        setErrorButtonLabel(label: cc.Label): this;\r\n        static get errorState(): boolean;\r\n        /**\r\n         * 當前 error dialog 狀態\r\n         * @param {boolean} value\r\n         */\r\n        static set errorState(value: boolean);\r\n        static get warningState(): boolean;\r\n        /**\r\n         * 當前 warning dialog 狀態\r\n         * @param {boolean} value\r\n         */\r\n        static set warningState(value: boolean);\r\n        get errorNode(): cc.Node;\r\n        get warningNode(): cc.Node;\r\n        get errorButton(): cc.Node;\r\n        get warningLabel(): cc.Label;\r\n        get errorLabel(): cc.Label;\r\n        get errorDelayTime(): number;\r\n        get warningDelayTime(): number;\r\n        get isShowBackHomeButton(): boolean;\r\n        get errorButtonLabel(): cc.Label;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 動畫處理,處理後的動畫回傳給予manager保存\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class AnimationHandler implements IF.IAnimationHandler {\r\n        private readonly animationManager;\r\n        constructor(animationManager: IF.IAnimationManager);\r\n        /**\r\n         * 更新動畫管理器內的spineName數據\r\n         * @param resName\r\n         * @param keyName\r\n         * @param spineName\r\n         */\r\n        updateSpineAnimationName(resName: string, keyName: string, spineName: string): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description TODO : 動畫管理器\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class AnimationManager implements IF.IAnimationManager {\r\n        private _spineName;\r\n        private static _instance;\r\n        private readonly _handler;\r\n        private readonly configManager;\r\n        private constructor();\r\n        /**\r\n         *  懶漢加載\r\n         *  初始化,只讓一個專案只有一次產生此class\r\n         */\r\n        static setInstance(configManager: IF.IConfigManager): void;\r\n        /**\r\n         *  獲取已經初始化的靜態實例class\r\n         */\r\n        static get instance(): IF.IAnimationManager;\r\n        getSpineName(resName: string, key: string | number): string;\r\n        set spineName(value: Map<string, Map<string, string>>);\r\n        get spineName(): Map<string, Map<string, string>>;\r\n        get handler(): IF.IAnimationHandler;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 音樂撥放疊加時,各種狀態設定\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum AudioStateType {\r\n            /**\r\n             *檢測到該音樂正在撥放時,清除正在撥放的音樂,後重新播放該音樂\r\n             * @type {AudioStateType.CLEAR_TO_REPLAY}\r\n             */\r\n            CLEAR_TO_REPLAY = \"CLEAR_TO_REPLAY\",\r\n            /**\r\n             * 檢測到該音樂正在撥放時,將直接離開\r\n             * @type {AudioStateType.NOT_PLAYING}\r\n             */\r\n            NOT_PLAYING = \"NOT_PLAYING\",\r\n            /**\r\n             * 檢測到該音樂正在撥放時,將可疊加撥放\r\n             * @type {AudioStateType.SUPERIMPOSE}\r\n             */\r\n            SUPERIMPOSE = \"SUPERIMPOSE\"\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)音樂工廠類,派發音樂事件\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IAudioFactory {\r\n            /**\r\n             * 保存該背景音樂撥放模式設定\r\n             * @param {string} name :音樂檔名稱\r\n             * @param {number} volume : 音量\r\n             * @param {boolean} loop : 是否循環\r\n             */\r\n            settingMusic(name: string, volume?: number, loop?: boolean): void;\r\n            /**\r\n             * 保存該效果音效撥放模式設定\r\n             * @param {string} name :音樂檔名稱\r\n             * @param {fcc.type.AudioStateType} canSuperimpose : 是否疊加撥放\r\n             * @param {number} volume : 音量\r\n             * @param {boolean} loop : 是否循環\r\n             */\r\n            settingEffect(name: string, canSuperimpose?: type.AudioStateType, volume?: number, loop?: boolean): void;\r\n            /**\r\n             * 撥放背景音樂\r\n             * 如果拿取不到享元撥放資料,將拿取預設資料\r\n             * @param {string} name\r\n             */\r\n            musicPlay(name: string): void;\r\n            /**\r\n             * 撥放效果音效\r\n             * 如果拿取不到享元撥放資料,將拿取預設資料\r\n             * @param {string} name\r\n             */\r\n            effectPlay(name: string): void;\r\n            /**\r\n             * 停止背景音樂\r\n             */\r\n            musicStop(): void;\r\n            /**\r\n             * 暫停背景音樂\r\n             */\r\n            musicPause(): void;\r\n            /**\r\n             * 停止效果音校\r\n             * @param {string} name\r\n             */\r\n            effectStop(name: string): any;\r\n            /**\r\n             * 停止所有效果音效\r\n             */\r\n            effectStopAll(): void;\r\n            /**\r\n             * 獲取該音樂撥放模式,如果返回NUll將照原預設\r\n             * @param {string} name\r\n             * @returns {Map<string, string | fcc.type.AudioStateType |boolean | number>}\r\n             */\r\n            getMusicState(name: string): Map<string, string | type.AudioStateType | boolean | number>;\r\n            /**\r\n             * 獲取該音效撥放模式,如果返回NUll將照原預設\r\n             * @param {string} name\r\n             * @returns {Map<string, string | fcc.type.AudioStateType | boolean | number>}\r\n             */\r\n            getEffectState(name: string): Map<string, string | type.AudioStateType | boolean | number>;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)音樂管理類\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IAudioManager {\r\n            /**\r\n             * 當前是否靜音\r\n             */\r\n            musicOnMute: boolean;\r\n            /**\r\n             * 當前是否靜音\r\n             */\r\n            effectOnMute: boolean;\r\n            /**\r\n             * 額外對該音樂做設定,可以不做設定,將會依照默認設定自動設定\r\n             * ```\r\n             *      預設參數:\r\n             *          volume : 默認為 Config 內的音量參數\r\n             *          loop : 默認 false\r\n             * ```\r\n             * @param {string} name - 音樂名稱\r\n             * @param {number} volume - 音量 0~1\r\n             * @param {boolean} loop - 是否重複撥放\r\n             * @return {this}\r\n             */\r\n            settingMusic(name: string, volume?: number, loop?: boolean): this;\r\n            /**\r\n             * 額外對該音效做設定,你可以不做設定,將會依照默認設定自動設定\r\n             * ```\r\n             *      預設參數:\r\n             *          canSuperimpose : fcc.type.AudioStateType.NOT_PLAYING\r\n             *          volume : 默認為 Config 內的音量參數\r\n             *          loop :默認為 false\r\n             * ```\r\n             * @param {string} name : 音效檔名\r\n             * @param {AudioStateType} canSuperimpose : 能否疊加\r\n             * @param {number} volume : 音量 0~1\r\n             * @param {boolean} loop : 是否重複撥放\r\n             * @return {this}\r\n             */\r\n            settingEffect(name: string, canSuperimpose?: type.AudioStateType, volume?: number, loop?: boolean): this;\r\n            /**\r\n             * 撥放音樂,將會依照當初設定的參數進行播放\r\n             * 若無發現可用參數設定,依照默認參數撥放\r\n             * @param {string} name - 音樂檔名\r\n             */\r\n            musicPlay(name: string): void;\r\n            /**\r\n             * 撥放音效,將會依照當初設定的參數進行播放\r\n             * 若無發現可用參數設定,依照默認參數撥放\r\n             * @param {string} name - 音效檔名\r\n             */\r\n            effectPlay(name: string): void;\r\n            /**\r\n             * 停止音樂\r\n             */\r\n            musicStop(): void;\r\n            /**\r\n             * 暫停音樂\r\n             */\r\n            musicPause(): void;\r\n            /**\r\n             * 停止音效\r\n             * @param {string} name - 音效檔名\r\n             */\r\n            effectStop(name: string): void;\r\n            /**\r\n             * 停止所有音效\r\n             */\r\n            effectStopAll(): void;\r\n            /**\r\n             * 獲取撥放的狀態\r\n             * ```\r\n             *      return data:\r\n             *          volume : number\r\n             *          loop : boolean\r\n             * ```\r\n             * @param {string} name - 音效檔名\r\n             * @return {Map<string, string | boolean | number>} - 撥放設定參數\r\n             */\r\n            getMusicState(name: string): Map<string, string | boolean | number>;\r\n            /**\r\n             * 獲取撥放的狀態\r\n             * ```\r\n             *      return data:\r\n             *          volume : number\r\n             *          canSuperimpose : fcc.type.AudioStateType\r\n             *          loop : boolean\r\n             * ```\r\n             * @param {string} name - 音樂檔名\r\n             * @return {Map<string, string | fcc.type.AudioStateType |boolean | number>} -\r\n             */\r\n            getEffectState(name: string): Map<string, string | boolean | number>;\r\n            /**\r\n             * 更新當前是否靜音模式\r\n             * @return {boolean} 當前是否靜音\r\n             */\r\n            updateMusicOnMute(): boolean;\r\n            /**\r\n             * 更新當前是否靜音模式\r\n             * @return {boolean} 當前是否靜音\r\n             */\r\n            updateEffectOnMute(): boolean;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace global {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 共用:操作數字{number}類方法\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        class Util {\r\n            private static formatting;\r\n            /**\r\n             * 四捨五入到小數點第N位\r\n             * @param {number} float - 浮點數\r\n             * @param {number} number - 要四捨五入到哪一位\r\n             * @return {number}\r\n             */\r\n            static roundOff(float: number, number: number): number;\r\n            /**\r\n             * 無條件捨去到小數點第N位\r\n             * @param {number} float - 浮點數\r\n             * @param {number} number - 要無條件捨去到哪一位\r\n             * @return {number}\r\n             */\r\n            static roundDown(float: number, number: number): number;\r\n            /**\r\n             * 無條件進位到小數點第N位\r\n             * @param {number} float - 浮點數\r\n             * @param {number} number - 要無條件進位到哪一位\r\n             * @return {number}\r\n             */\r\n            static roundUp(float: number, number: number): number;\r\n            /**\r\n             * 檢查該數字為小數有幾位\r\n             * @example input(1.03) -> output(2)\r\n             * @param {number}float - 浮點數\r\n             * @return {number}\r\n             */\r\n            static decimalsCount(float: number): number;\r\n            /**\r\n             * 將該數字轉字串並判斷是否能使用(K)單位取代零\r\n             * @example input(1000) -> output(1K)\r\n             * @param {number} number 需要格式化的數字\r\n             * @return {string} - 格式化後的字串數字\r\n             */\r\n            static numberFormat(number: number): string;\r\n            /**\r\n             * 將該數字格式化,每三個0前方給予','標記\r\n             * @example input(1000000) -> output(1,000,000)\r\n             * @param {number} number - 需要格式化的數字\r\n             * @return {string} - 格式化後的字串數字\r\n             */\r\n            static format(number: number): string;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 各種類型資源\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum LoadType {\r\n            /**\r\n             * 單一圖片\r\n             */\r\n            /**\r\n             * 圖輯類型\r\n             * @type {fcc.type.LoadType.IMG}\r\n             */\r\n            IMG = \"IMG\",\r\n            /**\r\n             * 圖輯類型\r\n             * @type {fcc.type.LoadType.IMG_ATLAS}\r\n             */\r\n            IMG_ATLAS = \"IMG_ATLAS\",\r\n            /**\r\n             * 骨骼动画類型\r\n             * @type {fcc.type.LoadType.SPINE}\r\n             */\r\n            SPINE = \"SPINE\",\r\n            /**\r\n             * 預載資源類型\r\n             * @type {fcc.type.LoadType.PREFAB}\r\n             */\r\n            PREFAB = \"PREFAB\",\r\n            /**\r\n             * 音樂類型\r\n             * @type {fcc.type.LoadType.MUSIC}\r\n             */\r\n            MUSIC = \"MUSIC\",\r\n            /**\r\n             * 文字類型(注意:目前只接收 .CSV 檔案)\r\n             * @type {fcc.type.LoadType.TEXT}\r\n             */\r\n            TEXT = \"TEXT\",\r\n            /**\r\n             * 場景類型(注意:動態載入資源需放入resource資料夾內 or bundle資料夾內)\r\n             * @type {fcc.type.LoadType.SCENE}\r\n             */\r\n            SCENE = \"SCENE\",\r\n            /**\r\n             * 外部URL腳本\r\n             * @type {fcc.type.LoadType.SCRIPT}\r\n             */\r\n            SCRIPT = \"SCRIPT\",\r\n            /**\r\n             * 外部URL CSS\r\n             * @type {fcc.type.LoadType.SCRIPT}\r\n             */\r\n            CSS = \"CSS\"\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)資源管理者\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ILoadResManager {\r\n            /**\r\n             * 初始加載物件\r\n             */\r\n            initialLoadState: Map<string, number>;\r\n            /**\r\n             * 次加載,可以在還未加載完成時,也能進入MainGame Scene\r\n             */\r\n            secondaryLoadState: Map<string, number>;\r\n            /**\r\n             * 外部資料加載資源狀態\r\n             */\r\n            scriptLoadState: Map<string, number>;\r\n            /**\r\n             * img物件保存\r\n             */\r\n            imgRes: Map<string, Map<string, cc.SpriteFrame>>;\r\n            /**\r\n             * spine 物件保存\r\n             */\r\n            spineRes: Map<string, sp.SkeletonData>;\r\n            /**\r\n             * 讀取後的文件檔案,保存位置\r\n             */\r\n            readFileRes: Map<string, Map<string, string>>;\r\n            /**\r\n             * 讀取後的Prefab,保存位置\r\n             */\r\n            prefabRes: Map<string, cc.Prefab>;\r\n            /**\r\n             * 音樂保存位置\r\n             */\r\n            musicRes: Map<string, cc.AudioClip>;\r\n            /**\r\n             * 場景保存位置\r\n             */\r\n            sceneRes: Map<string, cc.SceneAsset>;\r\n            /**\r\n             * 外部腳本保存URL地址,單存判斷是否重複加載\r\n             * @type {Set<string>}\r\n             */\r\n            scriptRes: Set<string>;\r\n            /**\r\n             * 主資源加載物件,監聽是否有callback,隨之返回該狀態\r\n             * @param name - 加載物件名稱,由使用者自訂義加載名稱\r\n             * @param progress - 加載進度\r\n             * @param state - 該物件加載百分比\r\n             */\r\n            loadMainEventCallback(name: string, progress: number, state: number): void;\r\n            /**\r\n             * 次資源加載物件,監聽是否有callback,隨之返回該狀態\r\n             * 注意,該狀態無總資源監聽回傳事件\r\n             * @param {string} name - 加載物件名稱,由使用者自訂義加載名稱\r\n             * @param {number} state - 該物件加載百分比\r\n             */\r\n            loadSecondaryEventCallback(name: string, state: number): void;\r\n            /**\r\n             * 外部資源加載完成返回\r\n             * @param {string} name - 加載物件名稱(檔名)\r\n             * @param {number} isError - 是否加載錯誤\r\n             */\r\n            loadScriptEventCallback(name: string, isError: boolean): void;\r\n            /**\r\n             * 加載該資料夾底下所有資源 注意: 需存放於 resources中\r\n             * @param {string} name - 自訂義拿取資源時的名稱\r\n             * @param {LoadType} type - 要獲取的資源類型\r\n             * @param {string} url - 要獲取的資源位置\r\n             * @param {boolean} isLanguageUsed - 是否要使用語系位置\r\n             * @return {this}\r\n             */\r\n            loadAsset(name: string, type: type.LoadType, url: string, isLanguageUsed?: boolean): this;\r\n            /**\r\n             * 加載 該 assetBundle 底下資源\r\n             * 使用此方法者,加載狀態存放次加載中 secondaryLoadState\r\n             * 注意:須於UI勾選配置為Bundle資料夾\r\n             * @param {string} name - 自訂義拿取資源時的名稱\r\n             * @param {LoadType} type - 要獲取的資源類型\r\n             * @param {string} url - 要獲取的資源位置\r\n             * @param {boolean} isLanguageUsed - 是否要使用語系位置\r\n             */\r\n            loadBundle(name: string, type: type.LoadType, url: string, isLanguageUsed?: boolean): this;\r\n            /**\r\n             * 保存使用者要callback的方法,當有回傳進度時將透過 loadEventCallback方法回傳進度\r\n             * @param {(progress: number,isError?:boolean) => void} callFun\r\n             * @param {string} methodName- 自訂義拿取資源時的名稱\r\n             * @returns {this}: methodName 未使用情況,回傳 void\r\n             */\r\n            callback(callFun: (progress: number, isError?: boolean) => void, methodName?: string): this;\r\n            /**\r\n             * 加載外部腳本\r\n             * @param name - 檔案名稱,不含副檔名\r\n             * @param type - 檔案類型\r\n             * @param url - 檔案URL,不含外部 URL\r\n             * @param parameter - GET 參數\r\n             * @returns {this}\r\n             */\r\n            loadExternalScript(name: string, type: type.LoadType, url: string, parameter?: string): this;\r\n            /**\r\n             * 查看該資源是否已加載完畢\r\n             * @param name\r\n             * @param isMainResources\r\n             */\r\n            getLoadState(name: string, isMainResources: boolean): boolean;\r\n            /**\r\n             * 清除資源\r\n             * @param {string} type - 資源類型\r\n             */\r\n            remove(type: string): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面) 載入各類資源工廠\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ILoadFactory {\r\n            /**\r\n             * 檢測當前Type,做各自對應的加載動作\r\n             * @param name\r\n             * @param type\r\n             * @param url\r\n             */\r\n            executeLoad(name: string, type: type.LoadType, url: string): void;\r\n            /**\r\n             * 執行Bundle載入動作\r\n             * @param name\r\n             * @param type\r\n             * @param url\r\n             */\r\n            executeLoadBundle(name: string, type: type.LoadType, url: string): void;\r\n            /**\r\n             * 加載外部腳本\r\n             * @param name - 檔案名稱,不含副檔名\r\n             * @param type - 檔案類型\r\n             * @param url - 檔案url,不含外部 url\r\n             * @param parameter - get 參數\r\n             */\r\n            executeLoadExternalScript(name: string, type: type.LoadType, url: string, parameter: string): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)EventTarget 事件\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IEventManager {\r\n            /**\r\n             * 事件總數量\r\n             */\r\n            eventCount: number;\r\n            /**\r\n             * 當前正在監聽那些事件;\r\n             */\r\n            eventsCurrentlyBeing: Map<string, string>;\r\n            /**\r\n             * 添加事件\r\n             * @param {string} eventName - 事件名稱\r\n             * @param parameter\r\n             */\r\n            emitEvent(eventName: type.ServerEventType | string, ...parameter: any): void;\r\n            /**\r\n             * server監聽回傳接收\r\n             * @param {string} eventName - 事件名稱\r\n             * @param {Function} callFun - 返回方法\r\n             * @param isPermanent - 是否常駐\r\n             * @param {any} self - 調用回哪個對象\r\n             */\r\n            eventListener(eventName: string, callFun: (...parameter: any) => void, isPermanent?: boolean, self?: any): void;\r\n            /**\r\n             * 刪除之前用同類型，回調，目標或 useCapture 註冊的事件監聽器，如果只傳遞 type，將會刪除 type 類型的所有事件監聽器。\r\n             * @param {ServerEventType | GameEventType} eventName - 事件名稱\r\n             * @param callFun?{Function} - 要刪除的方法,如果未傳參數,將默認全部相關的callFun一並刪除\r\n             */\r\n            destroyEvent(eventName: string, callFun?: Function): void;\r\n            /**\r\n             * 是否該事件持續監聽中\r\n             * @param {string} eventName - 事件名稱\r\n             * @return {boolean}\r\n             */\r\n            hasListening(eventName: type.ServerEventType | string): boolean;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 事件管理器,當前綁定的事件,事件數量\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class EventManager implements IF.IEventManager {\r\n        private static _instance;\r\n        private configManager;\r\n        /**\r\n         * 事件總數量\r\n         */\r\n        private _eventCount;\r\n        /**\r\n         * 遊戲內事件\r\n         */\r\n        target: cc.EventTarget;\r\n        /**\r\n         * 當前正在監聽那些事件;\r\n         */\r\n        private readonly _eventsCurrentlyBeing;\r\n        private constructor();\r\n        /**\r\n         *  懶漢加載\r\n         *  初始化,只讓一個專案產生一次該class\r\n         */\r\n        static setInstance(configManager: IF.IConfigManager): void;\r\n        /**\r\n         *  獲取已經初始化的靜態實例class\r\n         */\r\n        static get instance(): IF.IEventManager;\r\n        /**\r\n         * 添加事件\r\n         * @param {string} eventName - 事件名稱\r\n         * @param {any} any : 要回傳的物件\r\n         */\r\n        emitEvent(eventName: type.ServerEventType | string, ...any: any): void;\r\n        /**\r\n         * server監聽回傳接收\r\n         * @param {string} eventName - 事件名稱\r\n         * @param {Function} callFun - 返回方法\r\n         * @param isPermanent - 是否常駐\r\n         * @param {any} self - 調用回哪個對象\r\n         */\r\n        eventListener(eventName: string, callFun: (...parameter: any) => void, isPermanent?: boolean, self?: any): void;\r\n        /**\r\n         * 刪除之前用同類型，回調，目標或 useCapture 註冊的事件監聽器，如果只傳遞 type，將會刪除 type 類型的所有事件監聽器。\r\n         * @param {ServerEventType | GameEventType} eventName - 事件名稱\r\n         * @param callFun?{Function} - 要刪除的方法,如果未傳參數,將默認全部相關的callFun一並刪除\r\n         */\r\n        destroyEvent(eventName: string, callFun?: Function): void;\r\n        /**\r\n         * 是否該事件持續監聽中\r\n         * @param {string} eventName - 事件名稱\r\n         * @return {boolean}\r\n         */\r\n        hasListening(eventName: string): boolean;\r\n        get eventCount(): number;\r\n        get eventsCurrentlyBeing(): Map<string, string>;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 遊戲流程管理器 : 管理當前流程,執行當前流程\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class ProcessManager implements IF.IProcessManager {\r\n        private static _instance;\r\n        private configManager;\r\n        /**\r\n         * 當前遊戲狀態\r\n         * @type {fcc.type.GameStateType}\r\n         * @default - type.GameStateType.STANDBY\r\n         * @private\r\n         */\r\n        private _gameState;\r\n        /**\r\n         * 是否當前流程執行中\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        private isStartProcess;\r\n        /**\r\n         * 流程工廠\r\n         * @type {fcc.IF.IGameProcessFactory}\r\n         * @private\r\n         */\r\n        private gameProcessFactory;\r\n        private constructor();\r\n        /**\r\n         *  懶漢加載\r\n         *  初始化,只讓一個專案只有一次產生此class\r\n         */\r\n        static setInstance(configManager: IF.IConfigManager): void;\r\n        /**\r\n         *  獲取已經初始化的靜態實例class\r\n         */\r\n        static get instance(): IF.IProcessManager;\r\n        /**\r\n         * 設定流程\r\n         * @param {fcc.type.ProcessType | string} processName - 可使用預設 ProcessType 或自訂義流程名稱\r\n         * @param {fcc.IF.IProcess} process - 流程\r\n         * @return {this}\r\n         */\r\n        setProcess(processName: type.ProcessType | string, process: IF.IProcess): this;\r\n        /**\r\n         * 初始流程,執行綁定的流程內的onCreate方法\r\n         * @param {string | fcc.type.ProcessType} processName - 指定只要初始哪個流程 class,如果使用無參方法,將會初始化所有綁定的流程\r\n         */\r\n        initProcess(processName?: string | fcc.type.ProcessType): void;\r\n        /**\r\n         * 設定初始要執行的流程\r\n         * @param processName - 流程名稱\r\n         */\r\n        setDefaultProcess(processName: type.ProcessType | string): void;\r\n        /**\r\n         * 更換流程\r\n         * @param {fcc.type.ProcessType | string} processName - 要更換的流程名稱\r\n         */\r\n        changeProcess(processName: type.ProcessType | string): void;\r\n        /**\r\n         * 執行設定好的流程\r\n         * @return {Promise<void>}\r\n         */\r\n        play(): Promise<void>;\r\n        /**\r\n         * 改變當前流程進行狀態\r\n         * @param {boolean} state\r\n         */\r\n        private updateProcessState;\r\n        /**\r\n         * 清除堵塞狀態\r\n         * 注意:清除該狀態後,該次的流程即使尚未執行完,也能執行下次流程\r\n         */\r\n        remake(): void;\r\n        set gameState(value: type.GameStateType);\r\n        get gameState(): type.GameStateType;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 遊戲場景樣式\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum SceneStyleType {\r\n            /**\r\n             * 自動模式,將會配合玩家自動切換直式或橫式\r\n             * @type {SceneStyleType.AUTO}\r\n             */\r\n            AUTO = \"AUTO\",\r\n            /**\r\n             * 橫式樣式\r\n             * @type {SceneStyleType.HORIZONTAL}\r\n             */\r\n            HORIZONTAL = \"HORIZONTAL\",\r\n            /**\r\n             * 直式樣式\r\n             * @type {SceneStyleType.VERTICAL}\r\n             */\r\n            VERTICAL = \"VERTICAL\"\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * @Author 蕭立品\r\n         * @Description 當前方向\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum SceneDirectionType {\r\n            /**\r\n             * 直向\r\n             * @type {SceneDirectionType.PORTRAIT}\r\n             */\r\n            PORTRAIT = \"PORTRAIT\",\r\n            /**\r\n             * 橫向\r\n             * @type {SceneDirectionType.LANDSCAPE}\r\n             */\r\n            LANDSCAPE = \"LANDSCAPE\"\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面) 場景管理器\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ISceneManager {\r\n            /**\r\n             *\r\n             */\r\n            sceneDirection: type.SceneDirectionType;\r\n            /**\r\n             * cavers 設計寬度\r\n             * @param {number} width - 寬度\r\n             * @returns {this}\r\n             */\r\n            setDesignWidth(width: number): this;\r\n            /**\r\n             * cavers 設計高度\r\n             * @param {number} height - 高度\r\n             * @return {this}\r\n             */\r\n            setDesignHeight(height: number): this;\r\n            /**\r\n             * 更新當前示配寬高,會保存上次的scene更動模式\r\n             * 如不添加 style 參數 ,第一次將會使用預設模式更動,\r\n             * 如果已經更動過,將會使用你上次的style樣式\r\n             * @param {SceneStyleType | Function} style : 可自定義更動樣式,但實作(介面)ISceneStyle\r\n             * @return {this}\r\n             */\r\n            updateSize(style?: type.SceneStyleType | ISceneStyle): this;\r\n            /**\r\n             * 監聽當前cavers是否有更動大小,如果有將會自動更新當前是配寬高\r\n             * 將會比照上次更動的樣式進行更動\r\n             * 如果需求更動樣式,須先更新 updateSize()\r\n             * @param {number} time : 更新的頻率 單位毫秒 ms\r\n             */\r\n            startListener(time: number): void;\r\n            /**\r\n             * 更換場景\r\n             * @param {string} name - 場景資源名稱為你Res動態加載的自訂義的scene名稱\r\n             */\r\n            changeScene(name: string): void;\r\n            /**\r\n             * 清除該scene所有動作\r\n             * @param scene{cc.Component} - 要清除的scene class\r\n             */\r\n            removeScene(scene: cc.Component): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 監聽當前遊戲,玩家是否有更動寬高\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SceneSizeChangeListener {\r\n        private _isCanUpdateScene;\r\n        private configManager;\r\n        private sceneManager;\r\n        constructor(configManager: IF.IConfigManager, sceneManager: IF.ISceneManager);\r\n        /**\r\n         * 監聽是否要更動scene寬高\r\n         * @param {number} delayTime - 更新頻率\r\n         */\r\n        designSceneEventListener(delayTime: number): void;\r\n        /**\r\n         * 依照designSceneEventListener()參數中的delay時間,更新cavers\r\n         * @param {number} time - 更新頻率\r\n         * @return {Promise<void>}\r\n         * @private\r\n         */\r\n        private makeDesignScene;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace ABS {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description TODO\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        abstract class ABaseNotification implements IF.IBaseNotification {\r\n            /**\r\n             * (抽象)NotificationHandler 用來獲取這個class的標籤\r\n             * 詳細由子類實現\r\n             */\r\n            abstract readonly TAG_NAME: string;\r\n            /**\r\n             * 觀察者\r\n             * @type {Set<IBaseObserver>}\r\n             * @protected\r\n             */\r\n            protected readonly observer: Set<IF.IBaseObserver>;\r\n            /**\r\n             * (抽象)推播事件,參數由子類詳細實現\r\n             * @param any\r\n             */\r\n            abstract notify(...any: any[]): void;\r\n            protected constructor();\r\n            /**\r\n             * 訂閱該事件\r\n             * @param {IBaseObserver} observer - 關注者\r\n             * @param {boolean} isPermanent - 是否常駐\r\n             */\r\n            subscribe(observer: IF.IBaseObserver, isPermanent: boolean): void;\r\n            /**\r\n             * 移除訂閱\r\n             * @param {IBaseObserver} observer - 關注者\r\n             */\r\n            unsubscribe(observer: IF.IBaseObserver): void;\r\n            /**\r\n             * 移除所有訂閱\r\n             */\r\n            removeAll(): void;\r\n            /**\r\n             * 獲取該事件所有訂閱數量\r\n             */\r\n            getSubscribeCount(): number;\r\n            /**\r\n             * 獲取該事件所有訂閱者\r\n             */\r\n            getAllSubscribe(): Set<IF.IBaseObserver>;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 推播事件\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum NotificationType {\r\n            /**\r\n             * 自動狀態改變時\r\n             * @type {fcc.type.NotificationType.AUTO_CHANGE}\r\n             */\r\n            AUTO_CHANGE = \"AUTO_CHANGE\",\r\n            /**\r\n             * 當前遊戲速度狀態改變時\r\n             * @type {fcc.type.NotificationType.SPEED_CHANGE}\r\n             */\r\n            SPEED_CHANGE = \"SPEED_CHANGE\",\r\n            /**\r\n             * 用戶金額變更時\r\n             * @type {fcc.type.NotificationType.USER_MONEY_CHANGE}\r\n             */\r\n            USER_MONEY_CHANGE = \"USER_MONEY_CHANGE\",\r\n            /**\r\n             * 用戶更換的押住金額時\r\n             * @type {fcc.type.NotificationType.USER_BET_CHANGE}\r\n             */\r\n            USER_BET_CHANGE = \"USER_BET_CHANGE\",\r\n            /**\r\n             * 用戶贏分時\r\n             * @type {fcc.type.NotificationType.USER_GET_WIN}\r\n             */\r\n            USER_GET_WIN = \"USER_GET_WIN\",\r\n            /**\r\n             * 用戶改變mobile方向時\r\n             * @type {fcc.type.NotificationType.SCENE_DIRECTION_CHANGE}\r\n             */\r\n            SCENE_DIRECTION_CHANGE = \"SCENE_DIRECTION_CHANGE\",\r\n            /**\r\n             * server 回傳結果時\r\n             * @type {fcc.type.NotificationType.RESPONSE_RESULT}\r\n             */\r\n            RESPONSE_RESULT = \"RESPONSE_RESULT\",\r\n            /**\r\n             * 瞇排事件時\r\n             * @type {fcc.type.NotificationType.SCROLL_FOCUS_STATE}\r\n             */\r\n            SCROLL_FOCUS_STATE = \"SCROLL_FOCUS_STATE\",\r\n            /**\r\n             * 監聽SLOT所有列,當該列結束時,推播事件\r\n             * @type {fcc.type.NotificationType.AUTO_CHANGE}\r\n             */\r\n            SLOT_ROW_END = \"SLOT_ROW_END\",\r\n            /**\r\n             * 即停事件\r\n             */\r\n            STOP_NOW = \"STOP_NOW\"\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 場景方向改變觀察者,當有事件推送時,將會將該事件推播給綁定者\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SceneDirectionChangeObserver implements IF.IBaseObserver {\r\n        private _isPermanent;\r\n        private readonly self;\r\n        private readonly callFun;\r\n        constructor(callFun: (type: type.SceneDirectionType) => void, self: any);\r\n        pushNotification(type: type.SceneDirectionType): void;\r\n        get isPermanent(): boolean;\r\n        set isPermanent(value: boolean);\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 場景方向改變通知管理器\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SceneDirectionChangeNotification extends ABS.ABaseNotification {\r\n        /**\r\n         * NotificationHandler 用來獲取這個class的標籤\r\n         * @type {string}\r\n         */\r\n        readonly TAG_NAME: string;\r\n        constructor();\r\n        /**\r\n         * 訂閱該事件\r\n         * @param {AutoStateChangeObserver} observer - 推撥接收者\r\n         * @param {boolean} isPermanent - 是否常駐監聽\r\n         */\r\n        subscribe(observer: SceneDirectionChangeObserver, isPermanent: boolean): void;\r\n        /**\r\n         * 用戶更換方向時推送通知\r\n         * @param {SceneDirectionType} type - 當前用戶方向\r\n         */\r\n        notify(type: type.SceneDirectionType): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 自動模式 : 依照玩家當前的使用方式,自動更新為橫式 or 直式\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class AutoStyle implements IF.ISceneStyle {\r\n        private sceneManager;\r\n        private readonly eventLock;\r\n        constructor(sceneManager: IF.ISceneManager);\r\n        executionStyle(width: number, height: number): void;\r\n        /**\r\n         * 更新管理器內的 sceneDirection 變數,並推撥已更新當前場景方向的事件\r\n         *\r\n         * 注意 : 如果當前方向不變,卻更新了遊戲是配度,是不會推波事件的\r\n         *       只有方向改變才會推送推波事件\r\n         */\r\n        updateSceneDirection(): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 橫式樣式更新\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class HorizontalStyle implements IF.ISceneStyle {\r\n        private curDR;\r\n        executionStyle(width: number, height: number): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 直式樣式更新\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class VerticalStyle implements IF.ISceneStyle {\r\n        executionStyle(width: number, height: number): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 依照初始設定對應的更新模式,更新當前遊戲場景\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SceneStyleHandler {\r\n        private autoStyle;\r\n        private horizontalStyle;\r\n        private verticalStyle;\r\n        private readonly sceneManager;\r\n        constructor(sceneManager: IF.ISceneManager);\r\n        /**\r\n         * 匹對對應的更新類,做相對應的更新\r\n         * @param {fcc.type.SceneStyleType | fcc.IF.ISceneStyle} sceneStyle - 對應的的樣式 or 自訂義樣式\r\n         * @param {number} width - 寬\r\n         * @param {number} height - 高\r\n         */\r\n        getStyle(sceneStyle: type.SceneStyleType | IF.ISceneStyle, width: number, height: number): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 場景管理器 : 自動匹配遊戲寬高,監聽當前玩家遊玩模式(橫式or直式)\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SceneManager implements IF.ISceneManager {\r\n        private configManager;\r\n        private static _instance;\r\n        private style;\r\n        private _designWidth;\r\n        private _designHeight;\r\n        private sceneSizeChangeListener;\r\n        private sceneStyleHandler;\r\n        private _sceneDirection;\r\n        private constructor();\r\n        /**\r\n         *  懶漢加載\r\n         *  初始化,只讓一個專案產生一次該class\r\n         * @param {fcc.IF.IConfigManager} configManager\r\n         */\r\n        static setInstance(configManager: IF.IConfigManager): void;\r\n        /**\r\n         *  獲取已經初始化的靜態實例class\r\n         */\r\n        static get instance(): IF.ISceneManager;\r\n        /**\r\n         * cavers 設計寬度\r\n         * @param {number} width - 寬度\r\n         * @return {this}\r\n         */\r\n        setDesignWidth(width: number): this;\r\n        /**\r\n         * cavers 設計高度\r\n         * @param {number} height - 高度\r\n         * @return {this}\r\n         */\r\n        setDesignHeight(height: number): this;\r\n        /**\r\n         * 更新當前示配寬高,會保存上次的scene更動模式\r\n         * 如不添加參數,第一次將會使用預設模式更動\r\n         * @param {SceneStyleType | Function} style - 可自定義更動樣式,但需實作(介面)ISceneStyle\r\n         * @return {this}\r\n         */\r\n        updateSize(style?: type.SceneStyleType | IF.ISceneStyle): this;\r\n        /**\r\n         * 監聽當前cavers是否有更動大小,如果有將會自動更新當前是配寬高\r\n         * 將會比照上次更動的樣式進行更動\r\n         * 如果需求更動樣式,須先更新 updateSize()\r\n         * @param {number} time : 更新的頻率 單位毫秒 ms\r\n         */\r\n        startListener(time: number): void;\r\n        /**\r\n         * 更換場景\r\n         * @param {string} name : 場景資源名稱為你Res動態加載的自訂義的scene名稱\r\n         */\r\n        changeScene(name: string): void;\r\n        /**\r\n         * 清除該scene所有動作\r\n         * @param scene{cc.Component} - 要清除的scene class\r\n         */\r\n        removeScene(scene: cc.Component): void;\r\n        get sceneDirection(): type.SceneDirectionType;\r\n        set sceneDirection(value: type.SceneDirectionType);\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        interface ISlotStyleManager {\r\n            readonly slot: Map<string, IF.ISlot>;\r\n            readonly slotStyle: Map<string, IF.ISlotSetting>;\r\n            /**\r\n             * 添加老虎機主流程 需繼承 ISlot\r\n             * @return {this}\r\n             */\r\n            setSlotTemplate<T extends new (styleData: IF.ISlotSetting, configManager: IF.IConfigManager) => IF.ISlot>(slotTemplate: T): this;\r\n            /**\r\n             * 添加slot主事件樣式設定\r\n             */\r\n            setSlotStyle<T extends IF.ISlotSetting>(slotSetting?: new (slotStyleManager: IF.ISlotStyleManager) => T): T;\r\n            /**\r\n             * 初始所有操作,並實例化  綁定的 slot Class\r\n             */\r\n            build(slotSetting: IF.ISlotSetting): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 老虎機管理器 : 管理老虎機樣式,執行速度,效果\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SlotStyleManager implements IF.ISlotStyleManager {\r\n        private static _instance;\r\n        private readonly configManager;\r\n        private template;\r\n        private readonly _slot;\r\n        private readonly _slotStyle;\r\n        private constructor();\r\n        /**\r\n         *  懶漢加載\r\n         *  初始化,只讓一個專案產生一次該class\r\n         */\r\n        static setInstance(configManager: IF.IConfigManager): void;\r\n        /**\r\n         *  獲取已經初始化的靜態實例class\r\n         */\r\n        static get instance(): IF.ISlotStyleManager;\r\n        /**\r\n         * 添加執行流程的class 需繼承 ISlot\r\n         * @param {ASlot} slotTemplate\r\n         * @return {this}\r\n         */\r\n        setSlotTemplate<T extends new (styleData: IF.ISlotSetting, configManager: IF.IConfigManager) => IF.ISlot>(slotTemplate: T): this;\r\n        /**\r\n         * 添加slot主事件樣式設定\r\n         * @param {{new(slotStyleManager: fcc.IF.ISlotStyleManager): T}} slotSetting\r\n         * @return {T}\r\n         */\r\n        setSlotStyle<T extends IF.ISlotSetting>(slotSetting?: new (slotStyleManager: IF.ISlotStyleManager) => T): T;\r\n        /**\r\n         * 初始化Slot : 將Slot設定參數給予Slot做初始處理\r\n         */\r\n        build(slotSetting: IF.ISlotSetting): void;\r\n        get slot(): Map<string, fcc.IF.ISlot>;\r\n        get slotStyle(): Map<string, fcc.IF.ISlotSetting>;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 遊戲自動狀態種類\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum AutoType {\r\n            /**\r\n             * 無限AUTO\r\n             * @type {AutoType.AUTO}\r\n             */\r\n            AUTO = -1,\r\n            /**\r\n             * 直到Free出現後,結束AUTO狀態\r\n             * @type {AutoType.AUTO}\r\n             */\r\n            FREE_END = -2,\r\n            /**\r\n             * AUTO 50次\r\n             * @type {AutoType.AUTO_50}\r\n             */\r\n            AUTO_50 = 50,\r\n            /**\r\n             * AUTO 100次\r\n             * @type {AutoType.AUTO_100}\r\n             */\r\n            AUTO_100 = 100,\r\n            /**\r\n             * AUTO 500次\r\n             * @type {AutoType.AUTO_100}\r\n             */\r\n            AUTO_500 = 500,\r\n            /**\r\n             * AUTO 1000次\r\n             * @type {AutoType.AUTO_1000}\r\n             */\r\n            AUTO_1000 = 1000\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面) 老虎機類遊戲初期設定\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ISlotConfigManager extends IConfigManager {\r\n            /**\r\n             * 是否在遊戲進入後開啟auto狀態\r\n             * @type {boolean}\r\n             * @default false\r\n             * @private\r\n             */\r\n            readonly isAuto: boolean;\r\n            /**\r\n             * 初始遊戲最初的auto次數\r\n             * @type {AutoType}\r\n             * @default type.AutoType.AUTO\r\n             * @private\r\n             */\r\n            readonly autoCount: number;\r\n            /**\r\n             * 初始開始遊戲前是否是加速狀態\r\n             * @type {boolean}\r\n             * @default false\r\n             * @private\r\n             */\r\n            readonly isSpeedUp: boolean;\r\n            /**\r\n             * 初始遊戲最初的auto次數\r\n             * @param {AutoType} type\r\n             * @default type.AutoType.AUTO\r\n             * @returns {this}\r\n             */\r\n            setAutoCont(type: number): this;\r\n            /**\r\n             * 初始進入遊戲時Auto狀態\r\n             * @param {boolean} isAuto - 是否在遊戲進入後開啟auto狀態\r\n             * @default false\r\n             * @returns {this}\r\n             */\r\n            setAutoState(isAuto: boolean): this;\r\n            /**\r\n             * 是否在遊戲進入後是加速的狀態\r\n             * @param {boolean} isSpeedUp\r\n             * @default false\r\n             * @returns {this}\r\n             */\r\n            setSpeedState(isSpeedUp: boolean): this;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description TODO\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum LanguageType {\r\n            /**\r\n             * 台灣\r\n             * @type {LanguageType.TAIWAN}\r\n             */\r\n            TAIWAN = \"NTD\",\r\n            /**\r\n             * 中國\r\n             * @type {LanguageType.CHINESE}\r\n             */\r\n            CHINESE = \"CNY\",\r\n            /**\r\n             * 泰國\r\n             * @type {LanguageType.THAILAND}\r\n             */\r\n            THAILAND = \"THB\",\r\n            /**\r\n             * 美國\r\n             * @type {LanguageType.AMERICA}\r\n             */\r\n            AMERICA = \"USD\",\r\n            /**\r\n             * 越南\r\n             * @type {LanguageType.VIETNAM}\r\n             */\r\n            VIETNAM = \"VND\",\r\n            /**\r\n             * 印尼\r\n             */\r\n            INDONESIA = \"IDR\",\r\n            /**\r\n             * 馬來西亞\r\n             */\r\n            MALAYSIA = \"MYR\"\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 遊戲初始設定,並透過builder加載所有Manager\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SlotConfigManager implements IF.ISlotConfigManager {\r\n        private static _instance;\r\n        /**\r\n         * 載入外部資源URL\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        private _externallyLoadURL;\r\n        /**\r\n         * 當前遊戲名稱\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        private _gameNumber;\r\n        /**\r\n         * 是否在遊戲進入後開啟auto狀態\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        private _isAuto;\r\n        /**\r\n         * 初始遊戲最初的auto次數\r\n         * @type {AutoType}\r\n         * @private\r\n         */\r\n        private _autoCount;\r\n        /**\r\n         * 是否在遊戲進入後是加速的狀態\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        private _isSpeedUp;\r\n        /**\r\n         * 初始背景音樂音量(該音量將會成為AudioManager內預設音量)\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        private _musicVolume;\r\n        /**\r\n         * 初始將背景音樂靜音\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        private _isMusicOnMute;\r\n        /**\r\n         * 初始效果音量(該音量將會成為AudioManager內預設音量)\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        private _effectVolume;\r\n        /**\r\n         * 初始將效果音效靜音\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        private _isEffectOnMute;\r\n        /**\r\n         * 當前語系\r\n         * @type {LanguageType}\r\n         * @private\r\n         */\r\n        private _language;\r\n        /**\r\n         * 返回首頁URL\r\n         */\r\n        private _backHomeURL;\r\n        /**\r\n         * 是否要開啟Framework Debug模式\r\n         * 注意:遊戲正式上線須關閉\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        private _isFrameworkDebug;\r\n        /**\r\n         * cocos 框架 debug設定\r\n         * @default : INFO\r\n         */\r\n        private _cocosDebugSetting;\r\n        private constructor();\r\n        /**\r\n         * 懶漢加載\r\n         * 初始化,只讓一個專案只有一次產生此class\r\n         * @returns {SlotConfigManager}\r\n         */\r\n        static get instance(): IF.ISlotConfigManager;\r\n        /**\r\n         * 添加遊戲名稱\r\n         * @param {string} name - 遊戲名稱\r\n         * @default null\r\n         * @returns {this}\r\n         */\r\n        setGameNumber(name: string): this;\r\n        /**\r\n         * 設置初始預設音量\r\n         * @param {number} number - 音量 0~1\r\n         * @default 1\r\n         * @returns {this}\r\n         */\r\n        setMusicVolume(number: number): this;\r\n        /**\r\n         * 設置初始預設效果音量\r\n         * @param {number} number - 音量 0~1\r\n         * @default 1\r\n         * @returns {this}\r\n         */\r\n        setEffectVolume(number: number): this;\r\n        /**\r\n         * 初始將背景音樂靜音\r\n         * @param {boolean} OnMute - 是否靜音\r\n         * @default false\r\n         * @returns {this}\r\n         */\r\n        setMusicOnMute(OnMute: boolean): this;\r\n        /**\r\n         * 初始是否將效果音效靜音\r\n         * @param {boolean} OnMute - 是否靜音\r\n         * @default false\r\n         * @returns {this}\r\n         */\r\n        setEffectOnMute(OnMute: boolean): this;\r\n        /**\r\n         * 初始遊戲最初的auto次數\r\n         * @param {AutoType} type\r\n         * @default type.AutoType.AUTO\r\n         * @returns {this}\r\n         */\r\n        setAutoCont(type: type.AutoType): this;\r\n        /**\r\n         * 初始要從外部拿取資源的URL\r\n         * @param {string} url : 獲取外部資源的URL\r\n         * @default \"\"\r\n         * @returns {this}\r\n         */\r\n        setExternallyLoadURL(url: string): this;\r\n        /**\r\n         * 初始語系\r\n         * @param {LanguageType} languageType - 語系\r\n         * @default LanguageType.CHINESE\r\n         * @returns {this}\r\n         */\r\n        setLanguage(languageType: string): this;\r\n        /**\r\n         * 初始進入遊戲時Auto狀態\r\n         * @param {boolean} isAuto - 是否在遊戲進入後開啟auto狀態\r\n         * @default false\r\n         * @returns {this}\r\n         */\r\n        setAutoState(isAuto: boolean): this;\r\n        /**\r\n         * 是否在遊戲進入後是加速的狀態\r\n         * @param {boolean} isSpeedUp\r\n         * @default false\r\n         * @returns {this}\r\n         */\r\n        setSpeedState(isSpeedUp: boolean): this;\r\n        /**\r\n         * 是否要開啟Framework Debug模式\r\n         * 注意:遊戲正式上線須關閉\r\n         * @param {boolean} use\r\n         * @default true\r\n         * @returns {this}\r\n         */\r\n        setFrameWorkDebug(use: boolean): this;\r\n        /**\r\n         * cocos 框架 debug設定\r\n         * @param {cc.debug.DebugMode} type - debug 樣式\r\n         * @default - cc.debug.DebugMode.INFO\r\n         * @return {this}\r\n         */\r\n        setCocosDebug(type: cc.debug.DebugMode): this;\r\n        /**\r\n         * 返回首頁URL\r\n         * @param {string} url\r\n         * @default null\r\n         * @returns {this}\r\n         */\r\n        setBackHomeURL(url: string): this;\r\n        /**\r\n         * 實例化所有Manager class;\r\n         */\r\n        build(): void;\r\n        get externallyLoadURL(): string;\r\n        get gameNumber(): string;\r\n        get isAuto(): boolean;\r\n        get autoCount(): number;\r\n        get isSpeedUp(): boolean;\r\n        get musicVolume(): number;\r\n        get effectVolume(): number;\r\n        get language(): type.LanguageType | string;\r\n        get isFrameworkDebug(): boolean;\r\n        get isEffectOnMute(): boolean;\r\n        get isMusicOnMute(): boolean;\r\n        get backHomeURL(): string;\r\n        get cocosDebugSetting(): cc.debug.DebugMode;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace ABS {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (抽象類)載入外部腳本\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        abstract class ALoadScriptType {\r\n            protected scriptName: string;\r\n            protected type: string;\r\n            protected url: string;\r\n            protected parameter: string;\r\n            protected static head: HTMLHeadElement;\r\n            protected constructor(scriptName: string, type: string, url: string, parameter: string);\r\n            abstract loadScript(): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 加載外部css資源\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class CSSLoad extends ABS.ALoadScriptType {\r\n        private readonly linkElem;\r\n        constructor(scriptName: string, type: string, url: string, parameter: string);\r\n        loadScript(): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    class ScriptLoad extends ABS.ALoadScriptType {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 載入外部 js 腳本\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        private readonly linkElem;\r\n        constructor(scriptName: string, type: string, url: string, parameter: string);\r\n        loadScript(): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace ABS {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (抽象類)載入各類cocos資源\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        abstract class ALoadType implements IF.ILoadType {\r\n            protected type: any;\r\n            protected url: string;\r\n            protected dataName: string;\r\n            protected folder: string;\r\n            private beforeProgress;\r\n            private assetBundle;\r\n            protected constructor(dataName: string, type: cc.Asset, url: string, folder: string);\r\n            /**\r\n             * 加載資源方法\r\n             */\r\n            loadResources(): void;\r\n            /**\r\n             * 回傳該加載的資源\r\n             * @param {Error} error - 錯誤訊息\r\n             * @param {[] | cc.SceneAsset} assets - 資源\r\n             * @private\r\n             */\r\n            private loadResCallBack;\r\n            /**\r\n             * 回傳當前載入進度\r\n             * @param {number} complete - 以載入完畢的數量\r\n             * @param {number} TotalAmount - 總數量\r\n             * @private\r\n             */\r\n            private loadResProgress;\r\n            /**\r\n             * 載入完成後回調\r\n             * @protected\r\n             */\r\n            protected updateProgressEnd(): void;\r\n            /**\r\n             * 更新當前進度\r\n             * @param {string} key - 該資源名稱\r\n             * @param {number} state - 當前進度\r\n             * @param {number} update - 更上次進度比起,新增了多少進度\r\n             * @protected\r\n             */\r\n            protected updateManagerState(key: string, state: number, update: number): void;\r\n            /**\r\n             * 將資源保存在管理器中\r\n             * @param {string} dataName - 自訂義該資源名稱\r\n             * @param asset - 資源\r\n             * @protected\r\n             */\r\n            protected abstract setResToManager(dataName: string, asset: any): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 載入圖片資源\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class ImgLoad extends ABS.ALoadType {\r\n        constructor(dataName: string, type: any, url: string, folder: string);\r\n        /**\r\n         * 將資源保存在管理器中\r\n         * @param {string} dataName - 自訂義該資源名稱\r\n         * @param {cc.SpriteAtlas} asset - 資源\r\n         * @protected\r\n         */\r\n        setResToManager(dataName: string, asset: cc.SpriteFrame[]): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 載入音樂資源\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class MusicLoad extends ABS.ALoadType {\r\n        constructor(dataName: string, type: any, url: string, folder: string);\r\n        /**\r\n         * 將資源保存在管理器中\r\n         * @param {string} dataName - 自訂義該資源名稱\r\n         * @param {cc.AudioClip} asset - 資源\r\n         * @protected\r\n         */\r\n        setResToManager(dataName: string, asset: Array<cc.AudioClip>): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 載入圖片資源\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class PrefabLoad extends ABS.ALoadType {\r\n        constructor(dataName: string, type: any, url: string, folder: string);\r\n        /**\r\n         * 將資源保存在管理器中\r\n         * @param {string} dataName - 自訂義該資源名稱\r\n         * @param {cc.AudioClip} asset - 資源\r\n         * @protected\r\n         */\r\n        setResToManager(dataName: string, asset: Array<cc.Prefab>): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 載入場景資源\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SceneLoad extends ABS.ALoadType {\r\n        constructor(dataName: string, type: any, url: string, folder: string);\r\n        /**\r\n         * 將資源保存在管理器中\r\n         * @param {string} dataName - 自訂義該資源名稱\r\n         * @param {cc.AudioClip} asset - 資源\r\n         * @protected\r\n         */\r\n        setResToManager(dataName: string, asset: any): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 載入骨骼动画資源\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SpineLoad extends ABS.ALoadType {\r\n        constructor(dataName: string, type: any, url: string, folder: string);\r\n        /**\r\n         * 將資源保存在管理器中\r\n         * @param {string} dataName - 自訂義該資源名稱\r\n         * @param {cc.SkeletonData} asset - 資源\r\n         * @protected\r\n         */\r\n        setResToManager(dataName: string, asset: Array<sp.SkeletonData>): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 載入文本資源,目前只能載入.CSV 檔案\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class TextLoad extends ABS.ALoadType {\r\n        constructor(dataName: string, type: any, url: string, folder: string);\r\n        /**\r\n         *  目前只能傳入 .CSV 檔案,目前無從判斷該檔案副檔名\r\n         *  因此需自行檢查回傳資料是否正確\r\n         * @param {string} dataName - 自訂義該資源名稱\r\n         * @param {cc.SkeletonData} asset - 資源\r\n         * @protected\r\n         */\r\n        setResToManager(dataName: string, asset: cc.TextAsset): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 載入各類資源工廠\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class LoadTypeFactory implements IF.ILoadFactory {\r\n        private isLoadBundle;\r\n        private assetBundle;\r\n        private promise;\r\n        private readonly assetMethod;\r\n        private configManager;\r\n        private loadResManager;\r\n        constructor(loadResManager: IF.ILoadResManager, configManager: IF.IConfigManager);\r\n        /**\r\n         * 次資源加載\r\n         * @param {string} dataName - 檔案名稱\r\n         * @param {fcc.type.LoadType} type - 檔案類型\r\n         * @param {string} url - 檔案位置\r\n         * @return {Promise<void>}\r\n         */\r\n        loadBundle(dataName: string, type: type.LoadType, url: string): Promise<void>;\r\n        /**\r\n         * 檢測當前Type,做各自對應的加載動作\r\n         * @param dataName - 自訂義資源名稱\r\n         * @param type - 資源類型\r\n         * @param url - 資源位置\r\n         */\r\n        executeLoad(dataName: string, type: type.LoadType, url: string): void;\r\n        /**\r\n         * 執行Bundle載入動作\r\n         * @param dataName - 自訂義資源名稱\r\n         * @param type - 資源類型\r\n         * @param url - 資源位置\r\n         */\r\n        executeLoadBundle(dataName: string, type: type.LoadType, url: string): Promise<void>;\r\n        /**\r\n         * 確認當前資源類型,給相對應class 處理\r\n         * @param {string} dataName - 自訂義資源名稱\r\n         * @param {fcc.type.LoadType} type - 資源類型\r\n         * @param {string} url - 資源位置\r\n         * @param {string} folder - 資源父類資料夾,默認 resource\r\n         * @private\r\n         */\r\n        private checkLoadType;\r\n        /**\r\n         * 加載外部腳本\r\n         * @param name - 檔案名稱,不含副檔名\r\n         * @param type - 檔案類型\r\n         * @param url - 檔案url,不含外部 url\r\n         * @param parameter - get 參數\r\n         */\r\n        executeLoadExternalScript(name: string, type: type.LoadType, url: string, parameter: string): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 處理個別類型資源載入\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class LoadTypeHandler implements IF.ILoadFactory {\r\n        private factory;\r\n        private loadResManager;\r\n        constructor(loadResManager: IF.ILoadResManager, configManager: IF.IConfigManager);\r\n        /**\r\n         * 檢測當前Type,做各自對應的加載動作\r\n         * @param name\r\n         * @param type\r\n         * @param url\r\n         */\r\n        executeLoad(name: string, type: type.LoadType, url: string): void;\r\n        /**\r\n         * 執行Bundle載入動作\r\n         * @param name\r\n         * @param type\r\n         * @param url\r\n         */\r\n        executeLoadBundle(name: string, type: type.LoadType, url: string): Promise<void>;\r\n        /**\r\n         * 檢查重複命名\r\n         * @param {string} name\r\n         * @private\r\n         */\r\n        private checkRepeatTheName;\r\n        /**\r\n         * 加載外部腳本\r\n         * @param name - 檔案名稱,不含副檔名\r\n         * @param type - 檔案類型\r\n         * @param url - 檔案url,不含外部 url\r\n         * @param parameter - get 參數\r\n         */\r\n        executeLoadExternalScript(name: string, type: type.LoadType, url: string, parameter: string): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 資源管理者 : 加載資源,保存資源,或取當前加載進度\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class LoadResManager implements IF.ILoadResManager {\r\n        private configManager;\r\n        private static _instance;\r\n        /**\r\n         * 初始加載物件進度\r\n         */\r\n        private _initialLoadState;\r\n        /**\r\n         * 次加載,可以在還未加載完成時,也能進入MainGame Scene\r\n         */\r\n        private _secondaryLoadState;\r\n        /**\r\n         * 外部資料加載資源狀態\r\n         * @type {Map<string, number>}\r\n         * @private\r\n         */\r\n        private readonly _scriptLoadState;\r\n        /**\r\n         * img物件保存\r\n         */\r\n        private _imgRes;\r\n        /**\r\n         * spine 物件保存\r\n         */\r\n        private _spineRes;\r\n        /**\r\n         * 讀取後的文件檔案,保存位置\r\n         */\r\n        private _readFileRes;\r\n        /**\r\n         * 讀取後的Prefab,保存位置\r\n         */\r\n        private _prefabRes;\r\n        /**\r\n         * 音樂保存位置\r\n         */\r\n        private _musicRes;\r\n        /**\r\n         * 外部腳本保存URL地址,單存判斷是否重複加載\r\n         * @type {Set<string>}\r\n         */\r\n        private _scriptRes;\r\n        /**\r\n         * 場景保存位置\r\n         */\r\n        private _sceneRes;\r\n        private readonly loadTypeHandler;\r\n        private callFun;\r\n        private count;\r\n        private allProgress;\r\n        private beforeProgress;\r\n        private allProgressEndCount;\r\n        private constructor();\r\n        /**\r\n         *  懶漢加載\r\n         *  初始化,只讓一個專案產生一次該class\r\n         */\r\n        static setInstance(configManager: IF.IConfigManager): void;\r\n        /**\r\n         *  獲取已經初始化的靜態實例class\r\n         */\r\n        static get instance(): IF.ILoadResManager;\r\n        /**\r\n         * 主資源加載物件,監聽是否有callback,隨之返回該狀態\r\n         * @param name - 加載物件名稱,由使用者自訂義加載名稱\r\n         * @param progress - 加載進度\r\n         * @param state - 該物件加載百分比\r\n         */\r\n        loadMainEventCallback(name: string, progress: number, state: number): void;\r\n        /**\r\n         * 次資源加載物件,監聽是否有callback,隨之返回該狀態\r\n         * 注意,該狀態無總資源監聽回傳事件\r\n         * @param {string} name - 加載物件名稱,由使用者自訂義加載名稱\r\n         * @param {number} state - 該物件加載百分比\r\n         */\r\n        loadSecondaryEventCallback(name: string, state: number): void;\r\n        /**\r\n         * 外部資源加載完成返回\r\n         * @param {string} name - 加載物件名稱(檔名)\r\n         * @param {number} isError - 是否加載錯誤\r\n         */\r\n        loadScriptEventCallback(name: string, isError: boolean): void;\r\n        /**\r\n         * 單一資源返回判斷,用戶是否有添加callback參數\r\n         * @param {string} name - 加載物件名稱\r\n         * @param {number} state - 該物件加載百分比\r\n         * @param isError - 是否有錯誤回傳(外部加載腳本用)\r\n         * @private\r\n         */\r\n        private onlyResEventCallback;\r\n        /**\r\n         * 加載該資料夾底下所有資源 注意: 需存放於 resources中\r\n         * @param {string} name - 自訂義拿取資源時的名稱\r\n         * @param {LoadType} type - 要獲取的資源類型\r\n         * @param {string} url - 要獲取的資源位置\r\n         * @param {boolean} isLanguageUsed - 是否要使用語系位置\r\n         * @return {this}\r\n         */\r\n        loadAsset(name: string, type: type.LoadType, url: string, isLanguageUsed?: boolean): this;\r\n        /**\r\n         * 加載 該 assetBundle 底下資源\r\n         * 使用此方法者,加載狀態存放次加載中 secondaryLoadState\r\n         * 注意:須於UI勾選配置為Bundle資料夾\r\n         * @param {string} name - 自訂義拿取資源時的名稱\r\n         * @param {LoadType} type - 要獲取的資源類型\r\n         * @param {string} url - 要獲取的資源位置\r\n         * @param {boolean} isLanguageUsed - 是否要使用語系位置\r\n         */\r\n        loadBundle(name: string, type: type.LoadType, url: string, isLanguageUsed?: boolean): this;\r\n        /**\r\n         * 保存使用者要callback的方法,當有回傳進度時將透過 loadEventCallback方法回傳進度\r\n         * @param {(progress: number,isError?:boolean) => void} callFun\r\n         * @param {string} resName - 檔案名稱\r\n         * @returns {this}: methodName 未使用情況,回傳 void\r\n         */\r\n        callback(callFun: (progress: number, isError?: boolean) => void, resName?: string): this;\r\n        /**\r\n         * 查看該資源是否已加載完畢\r\n         * @param name\r\n         * @param isMainResources\r\n         */\r\n        getLoadState(name: string, isMainResources: boolean): boolean;\r\n        /**\r\n         * 加載外部腳本\r\n         * @param name - 檔案名稱,不含副檔名\r\n         * @param type - 檔案類型\r\n         * @param url - 檔案URL,不含外部 URL\r\n         * @param parameter - GET 參數\r\n         * @returns {this}\r\n         */\r\n        loadExternalScript(name: string, type: type.LoadType, url: string, parameter?: string): this;\r\n        /**\r\n         * 清除資源\r\n         * @param {string} type - 資源類型\r\n         */\r\n        remove(type: string): void;\r\n        set initialLoadState(value: Map<string, number>);\r\n        set secondaryLoadState(value: Map<string, number>);\r\n        set imgRes(value: Map<string, Map<string, cc.SpriteFrame>>);\r\n        set spineRes(value: Map<string, sp.SkeletonData>);\r\n        set readFileRes(value: Map<string, Map<string, string>>);\r\n        set prefabRes(value: Map<string, cc.Prefab>);\r\n        set musicRes(value: Map<string, cc.AudioClip>);\r\n        set scriptRes(value: Set<string>);\r\n        set sceneRes(value: Map<string, cc.SceneAsset>);\r\n        get initialLoadState(): Map<string, number>;\r\n        get secondaryLoadState(): Map<string, number>;\r\n        get scriptLoadState(): Map<string, number>;\r\n        get imgRes(): Map<string, Map<string, cc.SpriteFrame>>;\r\n        get spineRes(): Map<string, sp.SkeletonData>;\r\n        get readFileRes(): Map<string, Map<string, string>>;\r\n        get prefabRes(): Map<string, cc.Prefab>;\r\n        get musicRes(): Map<string, cc.AudioClip>;\r\n        get scriptRes(): Set<string>;\r\n        get sceneRes(): Map<string, cc.SceneAsset>;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 音樂撥放|暫停控制器,跟音效類稍微不同,只保存當下一個MusicID\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class MusicController implements IF.IAudioType {\r\n        private musicID;\r\n        constructor();\r\n        /**\r\n         * 撥放背景音樂,並配合享元資料,作相對應的撥放模式處理\r\n         * @param {string} name\r\n         * @param {Map<string, any>} data\r\n         */\r\n        play(name: string, data: Map<string, any>): void;\r\n        /**\r\n         *停止背景音樂\r\n         */\r\n        stop(): void;\r\n        /**\r\n         * 暫停背景音樂\r\n         */\r\n        pause(): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 效果音效撥放|暫停控制器\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class EffectController implements IF.IAudioType {\r\n        private effectID;\r\n        constructor();\r\n        /**\r\n         * 撥放效果音效,並配合享元資料,作相對應的撥放模式處理\r\n         * @param {string} name\r\n         * @param {Map<string, any>} data : 撥放模式資料\r\n         */\r\n        play(name: string, data: Map<string, any>): void;\r\n        /**\r\n         * 停止該音樂,並清除該Map effectID\r\n         * @param {string} name\r\n         */\r\n        stop(name: string): void;\r\n        /**\r\n         * 停止所有音效,並清除整個Map effectID\r\n         */\r\n        stopAll(): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 音樂工廠類,派發音樂事件\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class AudioFactory implements IF.IAudioFactory {\r\n        private readonly musicVolume;\r\n        private readonly effectVolume;\r\n        private readonly canSuperimpose;\r\n        private musicOnMute;\r\n        private effectOnMute;\r\n        private readonly loop;\r\n        private readonly musicData;\r\n        private readonly effectData;\r\n        private musicNormalData;\r\n        private effectNormalData;\r\n        private musicController;\r\n        private effectController;\r\n        private audioManager;\r\n        private configManager;\r\n        constructor(audioManager: IF.IAudioManager, configManager: IF.IConfigManager);\r\n        /**\r\n         * 初始化享元預設撥放模式\r\n         */\r\n        private initializeData;\r\n        /**\r\n         * 保存該背景音樂撥放模式設定\r\n         * @param {string} name - 音樂檔名稱\r\n         * @param {number} volume - 音量\r\n         * @param {boolean} loop - 是否循環\r\n         */\r\n        settingMusic(name: string, volume?: number, loop?: boolean): void;\r\n        /**\r\n         * 保存該效果音效撥放模式設定\r\n         * @param {string} name -音樂檔名稱\r\n         * @param {AudioStateType} canSuperimpose - 是否疊加撥放\r\n         * @param {number} volume - 音量\r\n         * @param {boolean} loop - 是否循環\r\n         */\r\n        settingEffect(name: string, canSuperimpose?: type.AudioStateType, volume?: number, loop?: boolean): void;\r\n        /**\r\n         * 撥放背景音樂\r\n         * 如果拿取不到享元撥放資料,將拿取預設資料\r\n         * @param {string} name - 音樂檔名\r\n         */\r\n        musicPlay(name: string): void;\r\n        /**\r\n         * 撥放效果音效\r\n         * 如果拿取不到享元撥放資料,將拿取預設資料\r\n         * @param {string} name - 音樂檔名\r\n         */\r\n        effectPlay(name: string): void;\r\n        /**\r\n         * 停止背景音樂\r\n         */\r\n        musicStop(): void;\r\n        /**\r\n         * 暫停背景音樂\r\n         */\r\n        musicPause(): void;\r\n        /**\r\n         * 停止效果音校\r\n         * @param {string} name - 音樂檔名\r\n         */\r\n        effectStop(name: string): void;\r\n        /**\r\n         * 停止所有效果音效\r\n         */\r\n        effectStopAll(): void;\r\n        /**\r\n         * 獲取該音樂撥放模式,如果返回NUll將照原預設\r\n         * @param {string} name - 音樂檔名\r\n         * @returns {Map<string, string | boolean | number>}\r\n         */\r\n        getMusicState(name: string): Map<string, string | number | boolean>;\r\n        /**\r\n         * 獲取該音效撥放模式,如果返回NUll將照原預設\r\n         * @param {string} name - 音樂檔名\r\n         * @returns {Map<string, string | boolean | number>}\r\n         */\r\n        getEffectState(name: string): Map<string, string | number | boolean>;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 音樂管理器,初始設定各音樂狀態,保存當前撥放音量\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class AudioManager implements IF.IAudioManager {\r\n        private configManager;\r\n        private static _instance;\r\n        private factory;\r\n        private _musicOnMute;\r\n        private _effectOnMute;\r\n        private constructor();\r\n        /**\r\n         *  懶漢加載\r\n         *  初始化,只讓一個專案只有一次產生此class\r\n         */\r\n        static setInstance(configManager: IF.IConfigManager): void;\r\n        /**\r\n         *  獲取已經初始化的靜態實例class\r\n         */\r\n        static get instance(): IF.IAudioManager;\r\n        /**\r\n         * 額外對該音樂做設定,可以不做設定,將會依照默認設定自動設定\r\n         * ```\r\n         *      預設參數:\r\n         *          volume : 默認為 Config 內的音量參數\r\n         *          loop : 默認 false\r\n         * ```\r\n         * @param {string} name - 音樂名稱\r\n         * @param {number} volume - 音量 0~1\r\n         * @param {boolean} loop - 是否重複撥放\r\n         * @return {this}\r\n         */\r\n        settingMusic(name: string, volume?: number, loop?: boolean): this;\r\n        /**\r\n         * 額外對該音效做設定,你可以不做設定,將會依照默認設定自動設定\r\n         * ```\r\n         *      預設參數:\r\n         *          canSuperimpose : fcc.type.AudioStateType.NOT_PLAYING\r\n         *          volume : 默認為 Config 內的音量參數\r\n         *          loop :默認為 false\r\n         * ```\r\n         * @param {string} name : 音效檔名\r\n         * @param {AudioStateType} canSuperimpose : 能否疊加\r\n         * @param {number} volume : 音量 0~1\r\n         * @param {boolean} loop : 是否重複撥放\r\n         * @return {this}\r\n         */\r\n        settingEffect(name: string, canSuperimpose?: type.AudioStateType, volume?: number, loop?: boolean): this;\r\n        /**\r\n         * 撥放音樂,將會依照當初設定的參數進行播放\r\n         * 若無發現可用參數設定,依照默認參數撥放\r\n         * @param {string} name - 音樂檔名\r\n         */\r\n        musicPlay(name: string): void;\r\n        /**\r\n         * 撥放音效,將會依照當初設定的參數進行播放\r\n         * 若無發現可用參數設定,依照默認參數撥放\r\n         * @param {string} name - 音效檔名\r\n         */\r\n        effectPlay(name: string): void;\r\n        /**\r\n         * 停止音樂\r\n         */\r\n        musicStop(): void;\r\n        /**\r\n         * 暫停音樂\r\n         */\r\n        musicPause(): void;\r\n        /**\r\n         * 停止音效\r\n         * @param {string} name - 音效檔名\r\n         */\r\n        effectStop(name: string): void;\r\n        /**\r\n         * 停止所有音效\r\n         */\r\n        effectStopAll(): void;\r\n        /**\r\n         * 獲取撥放的狀態\r\n         * ```\r\n         *      return data:\r\n         *          volume : number\r\n         *          loop : boolean\r\n         * ```\r\n         * @param {string} name - 音效檔名\r\n         * @return {Map<string, string | boolean | number>} - 撥放設定參數\r\n         */\r\n        getMusicState(name: string): Map<string, string | boolean | number>;\r\n        /**\r\n         * 獲取撥放的狀態\r\n         * ```\r\n         *      return data:\r\n         *          volume : number\r\n         *          canSuperimpose : fcc.type.AudioStateType\r\n         *          loop : boolean\r\n         * ```\r\n         * @param {string} name - 音樂檔名\r\n         * @return {Map<string, string | fcc.type.AudioStateType |boolean | number>} -\r\n         */\r\n        getEffectState(name: string): Map<string, string | type.AudioStateType | boolean | number>;\r\n        /**\r\n         * 更新當前是否靜音模式\r\n         * @return {boolean} 當前是否靜音\r\n         */\r\n        updateEffectOnMute(): boolean;\r\n        /**\r\n         * 更新當前是否靜音模式\r\n         * @return {boolean} 當前是否靜音\r\n         */\r\n        updateMusicOnMute(): boolean;\r\n        /**\r\n         * 當前是否靜音背景音樂\r\n         * @returns {boolean}\r\n         */\r\n        get effectOnMute(): boolean;\r\n        /**\r\n         * 當前是否靜音效果音效\r\n         * @returns {boolean}\r\n         */\r\n        get musicOnMute(): boolean;\r\n    }\r\n    /**\r\n     * 裝飾器\r\n     * 撥放背景音樂\r\n     * @param name {string} : 音樂檔名\r\n     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}\r\n     * @constructor\r\n     */\r\n    function Music(name: any): (target: any, key: string, descriptor: PropertyDescriptor) => void;\r\n    /**\r\n     * 裝飾器\r\n     * 停止背景音樂\r\n     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}\r\n     * @constructor\r\n     */\r\n    function MusicStop(): (target: any, key: string, descriptor: PropertyDescriptor) => void;\r\n    /**\r\n     * 裝飾器\r\n     * 撥放效果音效\r\n     * @param name[] {string} : 音樂檔名\r\n     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}\r\n     * @constructor\r\n     */\r\n    function Effect(...name: string[]): (target: any, key: string, descriptor: PropertyDescriptor) => void;\r\n    /**\r\n     * 裝飾器\r\n     * 暫停效果音效\r\n     * @param name[] {string} : 音樂檔名\r\n     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}\r\n     * @constructor\r\n     */\r\n    function EffectStop(...name: string[]): (target: any, key: string, descriptor: PropertyDescriptor) => void;\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author 蕭立品\r\n     * @Description 語系管理器 : 保存當前語言本,語系樣式\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class LanguageManager implements IF.ILanguageManager {\r\n        /**\r\n         * 當前語言文字緩存\r\n         * @type {{[p: string]: string}}\r\n         */\r\n        private languageCache;\r\n        /**\r\n         * 當前語系\r\n         * @type {string}\r\n         */\r\n        private _nowLang;\r\n        /**\r\n         * 當前綁定的組件\r\n         * @type {Map<cc.Label, string>}\r\n         */\r\n        private readonly _nowLanguageLabels;\r\n        /**\r\n         * 所有更新完後的label 都會保存至這,需要再次更換語系時使用\r\n         * @type {Array<Map<cc.Label, string>>}\r\n         * @private\r\n         */\r\n        private readonly allLanguageLabel;\r\n        /**\r\n         * 當前所有語系樣式列表\r\n         * @type {object}\r\n         */\r\n        private readonly _style;\r\n        private configManager;\r\n        private static _instance;\r\n        constructor(configManager: IF.IConfigManager);\r\n        /**\r\n         *  懶漢加載\r\n         *  初始化,只讓一個專案只有一次產生此class\r\n         */\r\n        static setInstance(configManager: IF.IConfigManager): void;\r\n        /**\r\n         *  獲取已經初始化的靜態實例class\r\n         */\r\n        static get instance(): IF.ILanguageManager;\r\n        /**\r\n         * 添加默認樣式\r\n         * @private\r\n         */\r\n        private initDefaultStyle;\r\n        /**\r\n         * 額外添加新的語系樣式\r\n         * @param {string | fcc.type.LanguageType} key - 國家簡寫\r\n         * @param {fcc.IF.ILanguageStyle} style - 新樣式\r\n         */\r\n        addStyle(key: string | type.LanguageType, style: IF.ILanguageStyle): void;\r\n        /**\r\n         * 更新語系,會更新當前所有已經綁定的 cc.Label\r\n         * @param {string | fcc.type.LanguageType} language - 要更新的語系\r\n         */\r\n        updateLanguage(language: string | type.LanguageType): void;\r\n        /**\r\n         * 添加當前語系\r\n         */\r\n        setLanguage(): void;\r\n        /**\r\n         * 獲取當前語系\r\n         * @return {string}\r\n         */\r\n        getLanguage(): string;\r\n        /**\r\n         * 獲取當前語系數據,返回該key對應的文字\r\n         * @param {string | undefined} key - 拿取當前緩存語系文本的某一段文字 |(空參數)獲取當前語系數據,返回所有數據\r\n         * @return {string} - 返回該段文字,如果找不到鍵值,默認返回 key\r\n         */\r\n        getText(key: string): string;\r\n        /**\r\n         * 獲取當前語系緩存\r\n         * @return {object}\r\n         */\r\n        getAllText(): object;\r\n        /**\r\n         * 重新獲取語系,並更新緩衝內\r\n         * @param {string | fcc.type.LanguageType} language - 有參數為強制更新該參數語系,無參為當前拿取當前語系更新緩衝\r\n         */\r\n        reTakeLanguageBuffer(language?: string | type.LanguageType): void;\r\n        /**\r\n         * TODO 清除無用的語系緩存\r\n         */\r\n        removeStringBuffer(): void;\r\n        /**\r\n         * 更新文字該label文字\r\n         * @param {cc.Label} target - 要更新的目標\r\n         * @param {string?} textKey - 要更新的文字 key\r\n         * @return {this}\r\n         */\r\n        updateText(target: cc.Label, textKey?: string): this;\r\n        /**\r\n         * 更新所有透過 updateText更新的組件,更新該組件樣是\r\n         * 注意 : 須配合 updateText 一起使用\r\n         * @param {boolean} save - 是否要保存 label組件,可配合updateLanguage()方法將已經綁定的label全部再次更換語系文字\r\n         */\r\n        updateStyle(save: boolean): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 綁定自己需要的所有推撥者\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class NotificationManager<T extends IF.IBaseNotification> implements IF.INotificationManager<T> {\r\n        /**\r\n         * 保存使用中的推撥者\r\n         * @type {Map<string, IBaseNotification>}\r\n         * @protected\r\n         */\r\n        protected readonly notificationToMap: Map<string, T>;\r\n        /**\r\n         * 懶漢加載\r\n         * @type {NotificationManager<any>}\r\n         * @private\r\n         */\r\n        private static _instance;\r\n        private constructor();\r\n        /**\r\n         * 懶漢加載\r\n         * @return {INotificationHandler<T>}\r\n         */\r\n        static instance<T extends IF.IBaseNotification>(): IF.INotificationManager<T>;\r\n        /**\r\n         * 添加推撥者\r\n         * @param {T} notification - 推撥者\r\n         * @return {this}\r\n         */\r\n        setNotification(notification: T): this;\r\n        /**\r\n         * 獲取以綁定的推播者\r\n         * @param {string} type - 事件名稱\r\n         * @return\r\n         */\r\n        getNotification(type: string): T;\r\n        /**\r\n         * 查看該事件是否已經加入管理器中\r\n         * @param {string} type - 事件名稱\r\n         * @return {boolean}\r\n         */\r\n        hasNotification(type: string): boolean;\r\n        /**\r\n         * 拿取所有以綁定的推播\r\n         * @return {Map<String, T>}\r\n         */\r\n        getAllNotifications(): Map<String, T>;\r\n    }\r\n}\r\ndeclare const FCC_VERSION = 0.04;\r\ndeclare namespace fcc {\r\n    /**\r\n     * 遊戲初始設定,並透過builder加載所有Manager\r\n     * @return {fcc.IF.IConfigManager}\r\n     * @private\r\n     */\r\n    let configMgr: IF.ISlotConfigManager;\r\n    /**\r\n     * TODO : 動畫管理器\r\n     * @return {fcc.IF.IAnimationManager}\r\n     * @private\r\n     */\r\n    let animationMgr: IF.IAnimationManager;\r\n    /**\r\n     * 音樂管理器,初始設定各音樂狀態,保存當前撥放音量\r\n     * @return {fcc.IF.IAudioManager}\r\n     * @private\r\n     */\r\n    let audioMgr: IF.IAudioManager;\r\n    /**\r\n     * 框架錯誤管理\r\n     * @return {fcc.IF.IErrorManager}\r\n     * @private\r\n     */\r\n    let errorMgr: IF.IErrorManager;\r\n    /**\r\n     * 語系管理器 : 保存當前語言本,語系樣式\r\n     * @return {fcc.IF.ILanguageManager}\r\n     * @private\r\n     */\r\n    let languageMgr: IF.ILanguageManager;\r\n    /**\r\n     * 事件管理器,當前綁定的事件,事件數量\r\n     * @return {fcc.IF.IEventManager}\r\n     * @private\r\n     */\r\n    let eventMgr: IF.IEventManager;\r\n    /**\r\n     * 資源管理者 : 加載資源,保存資源,獲取當前加載進度\r\n     * @return {fcc.IF.ILoadResManager}\r\n     * @constructor\r\n     * @private\r\n     */\r\n    let loadMgr: IF.ILoadResManager;\r\n    /**\r\n     * 網路管理 : 傳送封包,接收封包\r\n     * @return {fcc.IF.ILoadResManager}\r\n     * @private\r\n     */\r\n    function networkMgr(): null;\r\n    /**\r\n     * 遊戲流程管理器 : 管理當前流程,執行當前流程\r\n     * @return {fcc.IF.IProcessManager}\r\n     * @private\r\n     */\r\n    let processMgr: IF.IProcessManager;\r\n    /**\r\n     * 場景管理器 : 自動匹配遊戲寬高,監聽當前玩家遊玩模式(橫式or直式)\r\n     * @return {fcc.IF.ISceneManager}\r\n     * @private\r\n     */\r\n    let sceneMgr: IF.ISceneManager;\r\n    /**\r\n     * 老虎機管理器 : 管理老虎機樣式,執行速度,效果\r\n     */\r\n    let slotStyleMgr: IF.ISlotStyleManager;\r\n    /**\r\n     * 推撥者綁定與拿取\r\n     * @return {fcc.IF.INotificationManager<T>}\r\n     */\r\n    function notificationMgr<T extends IF.IBaseNotification>(): IF.INotificationManager<T>;\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面) 動畫類處理\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IAnimationHandler {\r\n            /**\r\n             * 更新動畫管理器內的spine數據\r\n             * @param resName\r\n             * @param keyName\r\n             * @param spineName\r\n             */\r\n            updateSpineAnimationName(resName: string, keyName: string, spineName: string): any;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面) 動畫類管理器\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IAnimationManager {\r\n            handler: IAnimationHandler;\r\n            spineName: Map<string, Map<string, string>>;\r\n            getSpineName(resName: string, key: string): string;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace global {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 共用:按鈕類方法\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        class Button {\r\n            /**\r\n             * 對該button添加監聽事件\r\n             * @param {cc.Button} buttonNode - 按鈕組件\r\n             * @param {string} methodName - 該按鈕綁定的方法名稱\r\n             * @param self - 該方法存在的位置\r\n             * @param customEventData - 回傳值\r\n             */\r\n            static addButtonEvent(buttonNode: cc.Button, methodName: string, self: any, customEventData?: any): void;\r\n            /**\r\n             * 禁用button\r\n             * @param {cc.Button} button - 按鈕組件\r\n             */\r\n            static disableButton(button: cc.Button): void;\r\n            /**\r\n             * 啟用button\r\n             * @param {cc.Button}button - 按鈕組件\r\n             */\r\n            static enableButton(button: cc.Button): void;\r\n            /**\r\n             * 對該node 添加 TOUCH_START 事件\r\n             * @param {cc.Node} node - 要綁定的事件物件\r\n             * @param {function} method - 觸發事件的方法\r\n             * @param {this} self - 該方法存在的位置\r\n             * @param {boolean} useCapture : \"是否關閉多點觸控功能\"\r\n             */\r\n            static addTouchStartEvent(node: cc.Node, method: Function, self: any, useCapture?: boolean): void;\r\n            /**\r\n             * 對該node 關閉 TOUCH_START 事件\r\n             * @param {cc.Node} node - 要綁定的事件物件\r\n             * @param {Function} method - 觸發事件的方法\r\n             * @param {this} self - 該方法存在的位置\r\n             * @param {boolean} useCapture - 是否關閉多點觸控功能\r\n             */\r\n            static offTouchStartEvent(node: cc.Node, method: Function, self: any, useCapture?: boolean): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace global {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 共用:Prefab方法\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        class Prefab {\r\n            /**\r\n             * 尋訪該node底下一層節點內所有物件\r\n             * @param {cc.Node} node - 父節點\r\n             * @return {Map<string, cc.Node>} - Map(key: 該子類node URL, value:該子類node物件)\r\n             */\r\n            static getNodeOneChildren(node: cc.Node): Map<string, cc.Node>;\r\n            /**\r\n             * 尋訪該node底下兩層子節點\r\n             * @param {node : 物件} node - 父節點\r\n             * @return {Map<string, cc.Node>} - Map(key: 該子類node URL, value:該子類node物件)\r\n             */\r\n            static getNodeTowChildren(node: cc.Node): Map<string, cc.Node>;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author 蕭立品\r\n         * @Description (介面) 語言樣是樣式表\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ILanguageStyle {\r\n            fontSize: number;\r\n            lineHeight: number;\r\n            textScale: {\r\n                default: number;\r\n                title: number;\r\n                text: number;\r\n            };\r\n            fontFamily: string;\r\n        }\r\n        /**\r\n         * @Author 蕭立品\r\n         * @Description (介面)語系管理\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ILanguageManager {\r\n            /**\r\n             * 額外添加新的語系樣式\r\n             * @param {string | fcc.type.LanguageType} key - 國家簡寫\r\n             * @param {fcc.IF.ILanguageStyle} style - 新樣式\r\n             */\r\n            addStyle(key: string | type.LanguageType, style: IF.ILanguageStyle): void;\r\n            /**\r\n             * 更新語系,會更新當前所有已經綁定的 cc.Label\r\n             * @param {string | fcc.type.LanguageType} language - 要更新的語系\r\n             */\r\n            updateLanguage(language: string | type.LanguageType): void;\r\n            /**\r\n             * 重新獲取語系,並更新緩衝內\r\n             * @param {string | fcc.type.LanguageType} language - 有參數為強制更新該參數語系,無參為當前拿取當前語系更新緩衝\r\n             */\r\n            reTakeLanguageBuffer(language?: string | type.LanguageType): any;\r\n            /**\r\n             * 更新文字該label文字\r\n             * @param {cc.Label} target - 要更新的目標\r\n             * @param {string?} textKey - 要更新的文字 key\r\n             * @return {this}\r\n             */\r\n            updateText(target: cc.Label, textKey?: string): this;\r\n            /**\r\n             * 更新所有透過 updateText更新的組件,更新該組件樣是\r\n             * 注意 : 須配合 updateText 一起使用\r\n             * @param {boolean} save - 是否要保存 label組件,可配合updateLanguage()方法將已經綁定的label全部再次更換語系文字\r\n             */\r\n            updateStyle(save: boolean): void;\r\n            /**\r\n             * 清除無用的語系緩存\r\n             */\r\n            removeStringBuffer(language?: string | type.LanguageType): void;\r\n            /**\r\n             * 添加當前語系\r\n             */\r\n            setLanguage(): void;\r\n            /**\r\n             * 獲取當前語系數據,返回該key對應的文字\r\n             * @param {string | undefined} key - 拿取當前緩存語系文本的某一段文字\r\n             * @return {string} - 返回該段文字,如果找不到鍵值,默認返回 key\r\n             */\r\n            getText(key: string): string;\r\n            /**\r\n             * 獲取當前語系緩存\r\n             * @return {object}\r\n             */\r\n            getAllText(): object;\r\n            /**\r\n             * 獲取當前語系\r\n             * @return {string}\r\n             */\r\n            getLanguage(): string;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace ABS {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 推撥持有者,可綁定於該推播者底下,當有事件推播時,將會推播給該class\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        abstract class ABaseObserver implements IF.IBaseObserver {\r\n            /**\r\n             * 是否常駐推撥\r\n             * @type {boolean}\r\n             * @private\r\n             */\r\n            private _isPermanent;\r\n            /**\r\n             * 推撥事件指向的 this\r\n             * @type {any}\r\n             * @private\r\n             */\r\n            private readonly _self;\r\n            /**\r\n             * 返回方法\r\n             * @type {(...any) => void} - 正確參數數量由子類實現\r\n             * @private\r\n             */\r\n            private readonly _callFun;\r\n            protected constructor(callFun: (...any: any[]) => void, self: any);\r\n            /**\r\n             * 推播事件\r\n             * @param any - 正確參數數量由子類實現\r\n             */\r\n            pushNotification(...any: any[]): void;\r\n            /**\r\n             * 是否常駐推撥\r\n             * @return {boolean}\r\n             */\r\n            get isPermanent(): boolean;\r\n            /**\r\n             * 是否常駐推撥\r\n             * @param {boolean} value\r\n             */\r\n            set isPermanent(value: boolean);\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)通知事件管理器\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IBaseNotification {\r\n            /**\r\n             * NotificationHandler 用來獲取這個class的標籤\r\n             */\r\n            readonly TAG_NAME: string;\r\n            /**\r\n             * 訂閱該事件\r\n             * @param {IBaseObserver} observer - 關注者\r\n             * @param {boolean} isPermanent - 是否常駐\r\n             */\r\n            subscribe(observer: IBaseObserver, isPermanent: boolean): void;\r\n            /**\r\n             * 移除訂閱\r\n             * @param {IBaseObserver} observer - 關注者\r\n             */\r\n            unsubscribe(observer: IBaseObserver): void;\r\n            /**\r\n             * 清除所有訂閱\r\n             */\r\n            removeAll(): void;\r\n            /**\r\n             * 發送通知\r\n             * @param any - 發送參數\r\n             */\r\n            notify(...any: any[]): void;\r\n            /**\r\n             * 獲取該事件所有訂閱數量\r\n             */\r\n            getSubscribeCount(): number;\r\n            /**\r\n             * 獲取該事件所有訂閱者\r\n             */\r\n            getAllSubscribe(): Set<any>;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)綁定自己需要的所有推撥者\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface INotificationManager<T extends IBaseNotification> {\r\n            /**\r\n             * 添加推撥者\r\n             * @param {T} notification - 推撥者\r\n             * @return {this}\r\n             */\r\n            setNotification(notification: T): this;\r\n            /**\r\n             * 獲取以綁定的推播者\r\n             * @param {string} type - 事件名稱\r\n             * @return\r\n             */\r\n            getNotification(type: string): T;\r\n            /**\r\n             * 查看該事件是否已經加入管理器中\r\n             * @param {string} type - 事件名稱\r\n             * @return {boolean}\r\n             */\r\n            hasNotification(type: string): boolean;\r\n            /**\r\n             * 查看當前所有以綁定的通知\r\n             */\r\n            getAllNotifications(): Map<String, T>;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author 蕭立品\r\n     * @Description TODO\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SmartFoxLink {\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 遊戲當下狀態\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum GameStateType {\r\n            /**\r\n             * 無狀態,待機狀態...\r\n             * @type {GameStateType.STANDBY}\r\n             */\r\n            STANDBY = \"STANDBY\",\r\n            /**\r\n             * 一般狀態遊戲中....\r\n             * @type {GameStateType.PLAYING}\r\n             */\r\n            PLAYING = \"PLAYING\",\r\n            /**\r\n             * 免費遊戲中....\r\n             * @type {GameStateType.FREEING}\r\n             */\r\n            FREEING = \"FREEING\"\r\n        }\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 框架預設的流程\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum ProcessType {\r\n            FREE = \"FREE\",\r\n            NORMAL = \"NORMAL\"\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)遊戲管理器,管理當前流程,遊戲當前狀態\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IProcessManager {\r\n            /**\r\n             * 當前遊戲狀態\r\n             * @type {fcc.type.GameStateType}\r\n             * @default - type.GameStateType.STANDBY\r\n             * @private\r\n             */\r\n            gameState: type.GameStateType;\r\n            /**\r\n             * 設定流程\r\n             * @param {fcc.type.ProcessType | string} processName - 可使用預設 ProcessType 或自訂義流程名稱\r\n             * @param {fcc.IF.IProcess} process - 流程\r\n             * @return {this}\r\n             */\r\n            setProcess(processName: type.ProcessType | string, process: IProcess): this;\r\n            /**\r\n             * 初始流程,執行綁定的流程內的onCreate方法\r\n             * @param {string | fcc.type.ProcessType} processName - 指定只要初始哪個流程 class,如果使用無參方法,將會初始化所有綁定的流程\r\n             */\r\n            initProcess(processName?: string | fcc.type.ProcessType): void;\r\n            /**\r\n             * 設定初始要執行的流程\r\n             * @param processName - 流程名稱\r\n             */\r\n            setDefaultProcess(processName: string | type.ProcessType): void;\r\n            /**\r\n             * 更換流程\r\n             * @param {fcc.type.ProcessType | string} processName - 原本設定的流程名稱\r\n             */\r\n            changeProcess(processName: type.ProcessType | string): void;\r\n            /**\r\n             * 執行設定好的流程\r\n             */\r\n            play(): Promise<void>;\r\n            /**\r\n             * 清除堵塞狀態\r\n             * 注意:清除該狀態後,該次的流程即使尚未執行完,也能執行下次流程\r\n             */\r\n            remake(): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)更新,獲取,加入,變更,使用等..流程工廠\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IGameProcessFactory {\r\n            /**\r\n             * 當前流程\r\n             */\r\n            process: IProcess;\r\n            /**\r\n             * 初始流程,執行綁定的流程內的onCreate方法\r\n             * @param {string | fcc.type.ProcessType} processName - 指定只要初始哪個流程 class,如果使用無參方法,將會初始化所有綁定的流程\r\n             */\r\n            initProcess(processName?: string | type.ProcessType): void;\r\n            /**\r\n             * 添加流程\r\n             * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\r\n             * @param {IProcess} process - 流程 class\r\n             */\r\n            setProcess(processName: string | type.ProcessType, process: IProcess): any;\r\n            /**\r\n             * 獲取該流程\r\n             * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\r\n             * @returns {IProcess}\r\n             */\r\n            getProcess(processName: string | type.ProcessType): IProcess;\r\n            /**\r\n             * 拿取全部已經綁定的流程\r\n             * @return {Map<string, fcc.IF.IProcess>}\r\n             */\r\n            getAllProcess(): Map<string, IF.IProcess>;\r\n            /**\r\n             * 改變流程\r\n             * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\r\n             */\r\n            changeProcess(processName: string | type.ProcessType): any;\r\n            /**\r\n             * 執行流程\r\n             * @returns {Promise<void>}\r\n             */\r\n            useProcess(): Promise<void>;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 流程工廠 : 更新,獲取,加入,變更等.. 注意:此 class 由 manager 實例化,如果無特殊需求,請勿使用\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class GameProcessFactory implements IF.IGameProcessFactory {\r\n        private gameManager;\r\n        private readonly processToMap;\r\n        process: IF.IProcess;\r\n        constructor(gameManager: IF.IProcessManager);\r\n        /**\r\n         * 初始流程,執行綁定的流程內的onCreate方法\r\n         * @param {string | fcc.type.ProcessType} processName - 指定只要初始哪個流程 class,如果使用無參方法,將會初始化所有綁定的流程\r\n         */\r\n        initProcess(processName?: string | fcc.type.ProcessType): void;\r\n        /**\r\n         * 添加流程\r\n         * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\r\n         * @param {IProcess} process - 流程 class\r\n         */\r\n        setProcess(processName: string | type.ProcessType, process: IF.IProcess): void;\r\n        /**\r\n         * 獲取該流程\r\n         * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\r\n         * @returns {IProcess}\r\n         */\r\n        getProcess(processName: string | type.ProcessType): IF.IProcess;\r\n        /**\r\n         * 拿取全部已經綁定的流程\r\n         * @return {Map<string, fcc.IF.IProcess>}\r\n         */\r\n        getAllProcess(): Map<string, IF.IProcess>;\r\n        /**\r\n         * 改變流程\r\n         * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱\r\n         */\r\n        changeProcess(processName: string | type.ProcessType): void;\r\n        /**\r\n         * 執行流程\r\n         * @returns {Promise<void>}\r\n         */\r\n        useProcess(): Promise<void>;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)執行老虎機主要方法\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ISlot {\r\n            /**\r\n             * 初始化該輪所有狀態\r\n             */\r\n            initializeState(): void;\r\n            /**\r\n             * Loop 老虎機方法\r\n             * @return {Promise<void>}\r\n             */\r\n            runSlotAnimation(): Promise<void>;\r\n            /**\r\n             * 啟動老虎機時過場動畫方法\r\n             * @return {Promise<void>}\r\n             */\r\n            sineInSlot(): Promise<void>;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)音樂控制器,由音樂工廠做相對應呼叫對應的控制器\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IAudioType {\r\n            /**\r\n             * 撥放音樂\r\n             * @param {string} name : 資源名稱\r\n             * @param {Map<string, any>} data : 該音樂撥放數據\r\n             */\r\n            play(name: string, data: Map<string, any>): void;\r\n            /**\r\n             * 停止該音樂\r\n             * @param {string} name\r\n             */\r\n            stop(name?: string): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)一般遊戲初期設定\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IConfigManager {\r\n            /**\r\n             * 載入外部資源URL\r\n             * @type {string}\r\n             * @default \"\"\r\n             * @private\r\n             */\r\n            readonly externallyLoadURL: string;\r\n            /**\r\n             * 當前遊戲名稱\r\n             * @type {string}\r\n             * @default null\r\n             * @private\r\n             */\r\n            readonly gameNumber: string;\r\n            /**\r\n             * 初始背景音樂音量(該音量將會成為AudioManager內預設音量)\r\n             * @type {number}\r\n             * @default 1\r\n             * @private\r\n             */\r\n            readonly musicVolume: number;\r\n            /**\r\n             * 初始將背景音樂靜音\r\n             * @type {boolean}\r\n             * @default false\r\n             * @private\r\n             */\r\n            readonly isMusicOnMute: boolean;\r\n            /**\r\n             * 初始效果音量(該音量將會成為AudioManager內預設音量)\r\n             * @type {number}\r\n             * @default 1\r\n             * @private\r\n             */\r\n            readonly effectVolume: number;\r\n            /**\r\n             * 初始將效果音效靜音\r\n             * @type {boolean}\r\n             * @default false\r\n             * @private\r\n             */\r\n            readonly isEffectOnMute: boolean;\r\n            /**\r\n             * 初始當前語系\r\n             * @type {LanguageType}\r\n             * @default LanguageType.CHINESE\r\n             * @private\r\n             */\r\n            readonly language: string | type.LanguageType;\r\n            /**\r\n             * 返回首頁URL\r\n             * @default null\r\n             */\r\n            readonly backHomeURL: string;\r\n            /**\r\n             * 是否要開啟Framework Debug模式\r\n             * 注意:遊戲正式上線須關閉\r\n             * @type {boolean}\r\n             * @default true\r\n             * @private\r\n             */\r\n            readonly isFrameworkDebug: boolean;\r\n            /**\r\n             * cocos 框架 debug設定\r\n             * @default - cc.debug.DebugMode.INFO\r\n             */\r\n            readonly cocosDebugSetting: cc.debug.DebugMode;\r\n            /**\r\n             * 添加遊戲名稱\r\n             * @param {string} name - 遊戲名稱\r\n             * @default null\r\n             * @returns {this}\r\n             */\r\n            setGameNumber(name: string): this;\r\n            /**\r\n             * 設置初始預設音量\r\n             * @param {number} number - 音量 0~1\r\n             * @default 1\r\n             * @returns {this}\r\n             */\r\n            setMusicVolume(number: number): this;\r\n            /**\r\n             * 設置初始預設效果音量\r\n             * @param {number} number - 音量 0~1\r\n             * @default 1\r\n             * @returns {this}\r\n             */\r\n            setEffectVolume(number: number): this;\r\n            /**\r\n             * 初始要從外部拿取資源的URL\r\n             * @param {string} url : 獲取外部資源的URL\r\n             * @default \"\"\r\n             * @returns {this}\r\n             */\r\n            setExternallyLoadURL(url: string): this;\r\n            /**\r\n             * 初始語系\r\n             * @param {LanguageType} languageType - 語系\r\n             * @default LanguageType.CHINESE\r\n             * @returns {this}\r\n             */\r\n            setLanguage(languageType: string | type.LanguageType): this;\r\n            /**\r\n             * 初始將背景音樂靜音\r\n             * @param {boolean} OnMute - 是否靜音\r\n             * @default false\r\n             * @returns {this}\r\n             */\r\n            setMusicOnMute(OnMute: boolean): this;\r\n            /**\r\n             * 初始是否將效果音效靜音\r\n             * @param {boolean} OnMute - 是否靜音\r\n             * @default false\r\n             * @returns {this}\r\n             */\r\n            setEffectOnMute(OnMute: boolean): this;\r\n            /**\r\n             * 是否要開啟Framework Debug模式\r\n             * 注意:遊戲正式上線須關閉\r\n             * @param {boolean} use\r\n             * @default true\r\n             * @returns {this}\r\n             */\r\n            setFrameWorkDebug(use: boolean): this;\r\n            /**\r\n             * cocos 框架 debug設定\r\n             * @param {cc.debug.DebugMode} type - debug 樣式\r\n             * @default - cc.debug.DebugMode.INFO\r\n             * @return {this}\r\n             */\r\n            setCocosDebug(type: cc.debug.DebugMode): this;\r\n            /**\r\n             * 返回首頁URL\r\n             * @param {string} url\r\n             * @default null\r\n             * @returns {this}\r\n             */\r\n            setBackHomeURL(url: string): this;\r\n            /**\r\n             * 實例化所有Manager class;\r\n             */\r\n            build(): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author 蕭立品\r\n         * @Description TODO\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IShowErrorDialog {\r\n            /**\r\n             * 顯示錯誤\r\n             * @param {boolean} permanentState - 是否持續顯示\r\n             * @param {string} message - 顯示錯誤訊息文字\r\n             * @param {string} buttonText - 按鈕文字\r\n             */\r\n            showError(permanentState: boolean, message: string, buttonText: string): any;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * 待刪除\r\n         */\r\n        enum GameEventType {\r\n            TEST = \"TEST\"\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace type {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description server 回傳事件 型\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        enum ServerEventType {\r\n            /**\r\n             *  一般獲獎回傳\r\n             */\r\n            BET_RESULT = \"BET_RESULT\",\r\n            /**\r\n             * 免費模式獲獎\r\n             */\r\n            FREE_SPIN_RESULT = \"FREE_SPIN_RESULT\",\r\n            /**\r\n             * 底層進遊戲 通知Loading頁面 可以顯示主遊戲場景\r\n             */\r\n            CAN_PLAY_GAME = \"CAN_PLAY_GAME\",\r\n            /**\r\n             * 獲取遊戲歷史結果\r\n             */\r\n            GET_GAME_HISTORY_RESULT = \"GET_GAME_HISTORY_RESULT\",\r\n            /**\r\n             * 獲取遊戲祥單\r\n             */\r\n            GET_HISTORY_DETAIL_RESULT = \"GET_HISTORY_DETAIL_RESULT\",\r\n            /**\r\n             * 該局遊戲序號\r\n             */\r\n            GROUP_ID = \"GROUP_ID\",\r\n            /**\r\n             * 進入遊戲後初始資訊\r\n             */\r\n            TABLE_INFO = \"TABLE_INFO\",\r\n            /**\r\n             * 各種錯誤訊息\r\n             */\r\n            WARNING = \"WARNING\"\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description 所有的通知推波實作接繼承這個介面\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IBaseObserver {\r\n            isPermanent: boolean;\r\n            /**\r\n             * 推波通知\r\n             */\r\n            pushNotification(...any: any[]): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        interface ILoadType {\r\n            /**\r\n             * 加載資源方法\r\n             */\r\n            loadResources(): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 載入圖片資源\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class ImgAtlasLoad extends ABS.ALoadType {\r\n        constructor(dataName: string, type: any, url: string, folder: string);\r\n        /**\r\n         * 將資源保存在管理器中\r\n         * @param {string} dataName - 自訂義該資源名稱\r\n         * @param {cc.SpriteAtlas} asset - 資源\r\n         * @protected\r\n         */\r\n        setResToManager(dataName: string, asset: cc.SpriteAtlas): void;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)所有執行容器接繼承於他\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IExecutionContent {\r\n            /**\r\n             * 更換流程\r\n             */\r\n            onChangeStatus(): void;\r\n            /**\r\n             * 初始化流程\r\n             * @returns {Promise<void>}\r\n             */\r\n            onCreate(): any;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)一般遊戲程序執行容器\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IGameProcedureExecutionContent extends IExecutionContent {\r\n            /**\r\n             * 執行流程\r\n             * @returns {Promise<void>}\r\n             */\r\n            onExecution(): Promise<void>;\r\n            /**\r\n             * 流程結束時\r\n             * @returns {Promise<void>}\r\n             */\r\n            onEnd(): Promise<void>;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)老虎機程式流程執行容器\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ISlotProcedureExecutionContent extends IExecutionContent {\r\n            /**\r\n             * 自訂流程開始時判斷\r\n             * @returns {Promise<void>}\r\n             */\r\n            onCustomizeStart(): Promise<void>;\r\n            /**\r\n             * 老虎機開始前漸入執行\r\n             * @returns {Promise<void>}\r\n             */\r\n            onSineInGrid(): Promise<void>;\r\n            /**\r\n             * 老虎機轉動\r\n             * @returns {Promise<void>}\r\n             */\r\n            onRunning(): Promise<void>;\r\n            /**\r\n             * 顯示結果動畫\r\n             * @returns {Promise<void>}\r\n             */\r\n            onShowAnswer(): Promise<void>;\r\n            /**\r\n             * 自訂義結束\r\n             * @returns {Promise<void>}\r\n             */\r\n            onCustomizeEnd(): Promise<void>;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)一般流程\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IGameProcess extends IProcess {\r\n            /**\r\n             * 執行流程\r\n             * @returns {this}\r\n             */\r\n            onExecution(): this;\r\n            /**\r\n             * 流程結束時\r\n             * @returns {this}\r\n             */\r\n            onEnd(): this;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)所有的流程父類\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface IProcess {\r\n            /**\r\n             * 儲存使用者綁定的流程方法\r\n             */\r\n            readonly process: Set<() => Promise<void> | void>;\r\n            /**\r\n             * 流程容器\r\n             */\r\n            readonly executionContent: IF.IExecutionContent;\r\n            /**\r\n             * 更換流程\r\n             */\r\n            onChangeStatus(): this;\r\n            /**\r\n             * 將所有綁定的流程方法依序執行\r\n             * @returns {Promise<void>}\r\n             */\r\n            start(): Promise<void>;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)老虎機流程\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ISlotGameProcess extends IProcess {\r\n            /**\r\n             * 初始化 : 自訂開始遊戲前的效果\r\n             * @example - 按鈕,背景…等\r\n             * @return {this}\r\n             */\r\n            onCustomizeStart(): this;\r\n            /**\r\n             * 老虎機運行前,漸入效果\r\n             * @return {this}\r\n             */\r\n            onSineInGrid(): this;\r\n            /**\r\n             * 遊戲持續執行動作\r\n             * @return {this}\r\n             */\r\n            onRunning(): this;\r\n            /**\r\n             * 自訂義停止後事件\r\n             * @example - 更換音樂,更換背景圖案,校正回歸流程狀態...等\r\n             * @return {this}\r\n             */\r\n            onCustomizeEnd(): this;\r\n            /**\r\n             * 顯示結果\r\n             * @returns {this}\r\n             */\r\n            onShowAnswer(): this;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 任何遊戲皆可用流程\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class GameProcess implements IF.IGameProcess {\r\n        /**\r\n         * 保存使用者綁定的流程方法\r\n         * @type {Set<Function>}\r\n         * @private\r\n         */\r\n        private readonly _process;\r\n        /**\r\n         * 流程容器\r\n         * @type {IGameProcedureExecutionContainer}\r\n         * @private\r\n         */\r\n        private readonly _executionContent;\r\n        constructor(container: IF.IGameProcedureExecutionContent);\r\n        /**\r\n         * 執行流程\r\n         * @return {this}\r\n         */\r\n        onExecution(): this;\r\n        /**\r\n         * 流程結束時\r\n         * @return {this}\r\n         */\r\n        onEnd(): this;\r\n        /**\r\n         * 更換流程\r\n         * @return {this}\r\n         */\r\n        onChangeStatus(): this;\r\n        /**\r\n         * 將所有綁定的流程方法依序執行\r\n         * @return {Promise<void>}\r\n         */\r\n        start(): Promise<void>;\r\n        get process(): Set<() => (Promise<void> | void)>;\r\n        get executionContent(): fcc.IF.IGameProcedureExecutionContent;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author XIAO-LI-PIN\r\n     * @Description 老虎機流程\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SlotGameProcess implements IF.ISlotGameProcess {\r\n        /**\r\n         * 保存使用者綁定的流程方法\r\n         * @type {Set<Function>}\r\n         * @private\r\n         */\r\n        private readonly _process;\r\n        /**\r\n         * 流程容器\r\n         * @type {ISlotProcedureExecutionContainer}\r\n         * @private\r\n         */\r\n        private readonly _executionContainer;\r\n        constructor(container: IF.ISlotProcedureExecutionContent);\r\n        /**\r\n         * 初始化 : 自訂開始遊戲前的效果\r\n         * @example - 按鈕,背景…等\r\n         * @return {this}\r\n         */\r\n        onCustomizeStart(): this;\r\n        /**\r\n         * 老虎機運行前,漸入效果\r\n         * @return {this}\r\n         */\r\n        onSineInGrid(): this;\r\n        /**\r\n         * 遊戲持續執行動作\r\n         * @return {this}\r\n         */\r\n        onRunning(): this;\r\n        /**\r\n         * 自訂義停止後事件\r\n         * @example - 更換音樂,更換背景圖案,校正回歸流程狀態...等\r\n         * @return {this}\r\n         */\r\n        onCustomizeEnd(): this;\r\n        /**\r\n         * 顯示結果\r\n         * @return {this}\r\n         */\r\n        onShowAnswer(): this;\r\n        /**\r\n         * 更換流程\r\n         * @example - fcc.processManager.changeProcess(GameType.NORMAL);\r\n         * @return {this}\r\n         */\r\n        onChangeStatus(): this;\r\n        /**\r\n         * 開始執行\r\n         * @return {Promise<void>}\r\n         */\r\n        start(): Promise<void>;\r\n        get executionContent(): fcc.IF.ISlotProcedureExecutionContent;\r\n        get process(): Set<() => (Promise<void> | void)>;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面) 對應該樣式,更新當前場景\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ISceneStyle {\r\n            executionStyle(width: number, height: number): void;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    namespace ABS {\r\n        /**\r\n         * @Author 蕭立品\r\n         * @Description TODO\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        abstract class ASlotSetting implements IF.ISlotSetting {\r\n            private _tag;\r\n            private _columnIntervalTime;\r\n            private _gridNodeToMap;\r\n            private _slotColumnToTween;\r\n            private _slotGirdSpeed;\r\n            private _slotGridHeight;\r\n            private _slotRowGridCount;\r\n            private _slotTurnCount;\r\n            private _speedUpMultiple;\r\n            private _lookAtCount;\r\n            sineInEasing: string;\r\n            sineOutEasing: string;\r\n            private _resultModule;\r\n            private readonly _slotStyleManager;\r\n            constructor(slotStyleManager: IF.ISlotStyleManager);\r\n            /**\r\n             * 瞇排轉動次數\r\n             * @param {number} count\r\n             * @return {this}\r\n             */\r\n            setLookAtCount(count: number): this;\r\n            /**\r\n             * 該樣式標籤\r\n             * @param {string} tag\r\n             * @return {this}\r\n             */\r\n            setTag(tag: string): this;\r\n            /**\r\n             * 老虎機顯示答案前的最少轉動次數\r\n             * @param {number} count\r\n             * @return {this}\r\n             */\r\n            setSlotTurnCount(count: number): this;\r\n            /**\r\n             * 老虎機每隔格子高度\r\n             * @param {number} height\r\n             * @return {this}\r\n             */\r\n            setSlotGridHeight(height: number): this;\r\n            /**\r\n             * 遊戲每格格子間的速度\r\n             * @param {number} time\r\n             * @return {this}\r\n             */\r\n            setSlotGirdSpeed(time: number): this;\r\n            /**\r\n             * 加速時的加速被率\r\n             * @param {number} multiple\r\n             * @return {this}\r\n             */\r\n            setSpeedUpMultiple(multiple: number): this;\r\n            /**\r\n             * 該老虎機 每列的格子數量\r\n             * @param {number} gridCount\r\n             * @return {this}\r\n             */\r\n            setSlotRowGridCount(gridCount: number): this;\r\n            /**\r\n             * 非加速模式,每列停止的時間間格\r\n             * @param {number} time\r\n             * @return {this}\r\n             */\r\n            setColumnIntervalTime(time: number): this;\r\n            /**\r\n             * 要執行輪播動化轉動老虎機的node\r\n             * @param {Array<cc.Node>} node\r\n             * @return {this}\r\n             */\r\n            setSlotColumnToTween(node: Array<cc.Node>): this;\r\n            /**\r\n             * 所有格子,做循環老虎機時,需更動該Node的位置\r\n             * @param {Map<number, Array<cc.Node>>} node\r\n             * @return {this}\r\n             */\r\n            setGridNodeToMap(node: Map<number, Array<cc.Node>>): this;\r\n            setSineInEasing(easing: string): this;\r\n            setSineOutEasing(easing: string): this;\r\n            /**\r\n             * 添加儲存SERVER答案的Model\r\n             */\r\n            setResultModel(resultModel: ISlotBaseResultModel | ISlotFreeBaseResultModel): this;\r\n            /**\r\n             * 設定結束\r\n             */\r\n            complete(): void;\r\n            get columnIntervalTime(): number;\r\n            get gridNodeToMap(): Map<number, Array<cc.Node>>;\r\n            get slotColumnToTween(): Array<cc.Node>;\r\n            get slotGirdSpeed(): number;\r\n            get slotGridHeight(): number;\r\n            get slotRowGridCount(): number;\r\n            get slotTurnCount(): number;\r\n            get speedUpMultiple(): number;\r\n            get slotStyleManager(): fcc.IF.ISlotStyleManager;\r\n            get tag(): string;\r\n            get resultModule(): ISlotBaseResultModel | ISlotFreeBaseResultModel;\r\n            get lookAtCount(): number;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @Author XIAO-LI-PIN\r\n * @Description (介面)所有類型Slot免費狀態接收封包的父類\r\n * @Date 2021/8/23 下午4:38:22\r\n * @Version 0.0.5\r\n */\r\ninterface ISlotFreeBaseResultModel {\r\n    /**\r\n     * 0: 押注成功 1: 非免費時間押注\r\n     */\r\n    State: number;\r\n    /**\r\n     * 玩家現有金額(贏分後)\r\n     */\r\n    UserPointAfter: number;\r\n    /**\r\n     * 接下來遊戲狀態(0:一般 1:免費遊戲 2:小遊戲)\r\n     */\r\n    GameState: number;\r\n    /**\r\n     * 剩餘免費遊戲次數 (0:沒有 1~99次)\r\n     */\r\n    Count: number;\r\n    /**\r\n     * 免費遊戲累計贏分\r\n     */\r\n    FreeSpinWin: number;\r\n    /**\r\n     * 總贏得金額 (0:輸了 大於0:贏了 )\r\n     */\r\n    TotalWinPoint: number;\r\n    /**\r\n     * 15格的資料\r\n     */\r\n    Grid: Array<number>;\r\n    /**\r\n     * 瞇牌0:不用 1:瞇牌效果\r\n     */\r\n    LookAt: Array<number>;\r\n}\r\n/**\r\n * @Author XIAO-LI-PIN\r\n * @Description (介面)所有類型Slot一般狀態接收封包的父類\r\n * @Date 2021/8/23 下午4:38:22\r\n * @Version 0.0.5\r\n */\r\ninterface ISlotBaseResultModel {\r\n    /**\r\n     * 0: 押注成功 1:遊戲狀態不符 2:超過\r\n     */\r\n    State: number;\r\n    /**\r\n     * 總贏得金額 (0:輸了 大於0:贏了 )\r\n     */\r\n    TotalWinPoint: number;\r\n    /**\r\n     * 玩家現有金額(贏分後)\r\n     */\r\n    UserPointAfter: number;\r\n    /**\r\n     * 玩家現有金額(押注後)\r\n     */\r\n    UserPointBefore: number;\r\n    /**\r\n     * 15格的資料\r\n     */\r\n    Grid: Array<number>;\r\n    /**\r\n     * 瞇牌0:不用 1:瞇牌效果\r\n     */\r\n    LookAt: Array<number>;\r\n}\r\ndeclare namespace fcc {\r\n    namespace IF {\r\n        /**\r\n         * @Author XIAO-LI-PIN\r\n         * @Description (介面)參數設定\r\n         * @Date 2021/8/23 下午4:38:22\r\n         * @Version 0.0.5\r\n         */\r\n        interface ISlotSetting {\r\n            /**\r\n             * 該樣式標籤\r\n             */\r\n            tag: string;\r\n            /**\r\n             * 老虎機顯示答案前的最少轉動次數\r\n             * @param {number} count\r\n             * @return {this}\r\n             */\r\n            slotTurnCount: number;\r\n            /**\r\n             * 老虎機每格格子高度\r\n             * @param {number} height\r\n             * @return {this}\r\n             */\r\n            slotGridHeight: number;\r\n            /**\r\n             * 遊戲每格格子間的速度\r\n             * @param {number} time\r\n             * @return {this}\r\n             */\r\n            slotGirdSpeed: number;\r\n            /**\r\n             * 該老虎機 每列的格子數量\r\n             * @param {number} gridCount\r\n             * @return {this}\r\n             */\r\n            slotRowGridCount: number;\r\n            /**\r\n             * 加速時的加速倍率\r\n             * @param {number} multiple\r\n             * @return {this}\r\n             */\r\n            speedUpMultiple: number;\r\n            /**\r\n             * 要執行輪播動畫,轉動老虎機的所有列 cc.Node\r\n             * @param {Array<cc.Node>} node\r\n             * @return {this}\r\n             */\r\n            slotColumnToTween: Array<cc.Node>;\r\n            /**\r\n             * 非加速模式,每列停止的時間間格\r\n             * @param {number} time\r\n             * @return {this}\r\n             */\r\n            columnIntervalTime: number;\r\n            /**\r\n             * 所有格子,執行動畫的所有格子\r\n             * @param {Map<number, Array<cc.Node>>} node\r\n             * @return {this}\r\n             */\r\n            gridNodeToMap: Map<number, Array<cc.Node>>;\r\n            /**\r\n             * 瞇排轉動次數\r\n             */\r\n            lookAtCount: number;\r\n            /**\r\n             * 漸入時TWEEN動畫類型\r\n             */\r\n            sineInEasing: string;\r\n            /**\r\n             * 淡出時TWEEN 動畫類型\r\n             */\r\n            sineOutEasing: string;\r\n            /**\r\n             * 添加儲存SERVER答案的Model\r\n             */\r\n            resultModule: ISlotBaseResultModel | ISlotFreeBaseResultModel;\r\n            /**\r\n             * 該樣式標籤\r\n             * @param {string} tag\r\n             * @return {this}\r\n             */\r\n            setTag(tag: string): this;\r\n            /**\r\n             * 瞇排轉動次數\r\n             */\r\n            setLookAtCount(count: number): this;\r\n            /**\r\n             * 老虎機顯示答案前的最少轉動次數\r\n             * @param {number} count\r\n             * @return {this}\r\n             */\r\n            setSlotTurnCount(count: number): this;\r\n            /**\r\n             * 老虎機每格格子高度\r\n             * @param {number} height\r\n             * @return {this}\r\n             */\r\n            setSlotGridHeight(height: number): this;\r\n            /**\r\n             * 老虎機一般狀態速度\r\n             * @param {number} time\r\n             * @return {this}\r\n             */\r\n            setSlotGirdSpeed(time: number): this;\r\n            /**\r\n             * 該老虎機 每列的格子數量\r\n             * @param {number} gridCount\r\n             * @return {this}\r\n             */\r\n            setSlotRowGridCount(gridCount: number): this;\r\n            /**\r\n             * 加速時的加速倍率\r\n             * @param {number} multiple\r\n             * @return {this}\r\n             */\r\n            setSpeedUpMultiple(multiple: number): this;\r\n            /**\r\n             * 要執行輪播動畫,轉動老虎機的所有列 cc.Node\r\n             * @param {Array<cc.Node>} node\r\n             * @return {this}\r\n             */\r\n            setSlotColumnToTween(node: Array<cc.Node>): this;\r\n            /**\r\n             * 非加速模式,每列停止的時間間格\r\n             * @param {number} time\r\n             * @return {this}\r\n             */\r\n            setColumnIntervalTime(time: number): this;\r\n            /**\r\n             * 所有格子,執行動畫的所有格子\r\n             * @param {Map<number, Array<cc.Node>>} node\r\n             * @return {this}\r\n             */\r\n            setGridNodeToMap(node: Map<number, Array<cc.Node>>): this;\r\n            /**\r\n             * 漸入時TWEEN動畫類型\r\n             */\r\n            setSineInEasing(easing: string): this;\r\n            /**\r\n             * 淡出時TWEEN 動畫類型\r\n             */\r\n            setSineOutEasing(easing: string): this;\r\n            /**\r\n             * 添加儲存SERVER答案的Model\r\n             */\r\n            setResultModel(resultModel: ISlotBaseResultModel | ISlotFreeBaseResultModel): this;\r\n            /**\r\n             * 設定結束\r\n             */\r\n            complete(): any;\r\n        }\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author 蕭立品\r\n     * @Description 老虎機轉動時與顯示答案時的圖片一致\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SlotImgSetting extends ABS.ASlotSetting {\r\n        /**\r\n         * 更換圖片的所有格子\r\n         * @param {Map<number, Array<cc.Sprite>>} sprite\r\n         * @return {this}\r\n         */\r\n        private _gridSpriteToMap;\r\n        /**\r\n         * slot 所有靜態格子圖片\r\n         * @param {Map<string, cc.SpriteFrame>} img\r\n         * @return {this}\r\n         */\r\n        private _gridImg;\r\n        /**\r\n         * slot 所有靜態格子圖片\r\n         * @param {Array<cc.SpriteFrame>} img\r\n         * @return {this}\r\n         */\r\n        setGridImg(img: Map<string, cc.SpriteFrame>): this;\r\n        /**\r\n         * 所有格子的圖片,做循環老虎雞時,需更動的圖片\r\n         * @param {Map<number, Array<cc.Sprite>>} sprite\r\n         * @return {this}\r\n         */\r\n        setGirdSpriteToMap(sprite: Map<number, Array<cc.Sprite>>): this;\r\n        get gridSpriteToMap(): Map<number, Array<cc.Sprite>>;\r\n        get gridImg(): Map<string, cc.SpriteFrame>;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author 蕭立品\r\n     * @Description 老虎機轉動時使用模糊圖片\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SlotBurredImgSetting extends SlotImgSetting {\r\n        /**\r\n         * slot 所有模糊圖片\r\n         * @type {Map<string, cc.SpriteFrame>}\r\n         * @private\r\n         */\r\n        private _gridBurredImg;\r\n        /**\r\n         * slot 所有模糊圖片\r\n         * @param {Array<cc.SpriteFrame>} img\r\n         * @return {this}\r\n         */\r\n        setGridBurredImg(img: Map<string, cc.SpriteFrame>): this;\r\n        get gridBurredImg(): Map<string, cc.SpriteFrame>;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author 蕭立品\r\n     * @Description 老虎機轉動時與顯示答案時的圖片一致,且可對各列分別給予停軸時間\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SlotImgSpecialSetting extends SlotImgSetting {\r\n        /**\r\n         * slot 停軸間格\r\n         * 依照你SLOT 列數 各列間的停軸間格\r\n         */\r\n        private _slotRowTime;\r\n        /**\r\n         * 各軸瞇排時間\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        private _lookAtTime;\r\n        /**\r\n         * slot 各列停軸時間\r\n         * 依照你SLOT 列數 各列間的停軸間格\r\n         * @param {Array<number>} time - 各軸間格時間\r\n         * @return {this}\r\n         */\r\n        setSlotRowTime(time: number): this;\r\n        /**\r\n         * 瞇排時間\r\n         * @param {number} time\r\n         * @return {this}\r\n         */\r\n        setLookAtTime(time: number): this;\r\n        get slotRowTime(): number;\r\n        get lookAtTime(): number;\r\n    }\r\n}\r\ndeclare namespace fcc {\r\n    /**\r\n     * @Author 蕭立品\r\n     * @Description 老虎機轉動時使用模糊圖片,且可對各列分別給予停軸時間\r\n     * @Date 2021/8/23 下午4:38:22\r\n     * @Version 0.0.5\r\n     */\r\n    class SlotBurredImgSpecialSetting extends SlotImgSpecialSetting {\r\n        /**\r\n         * slot 所有模糊圖片\r\n         * @type {Map<string, cc.SpriteFrame>}\r\n         * @private\r\n         */\r\n        private _gridBurredImg;\r\n        /**\r\n         * slot 所有模糊圖片\r\n         * @param {Array<cc.SpriteFrame>} img\r\n         * @return {this}\r\n         */\r\n        setGridBurredImg(img: Map<string, cc.SpriteFrame>): this;\r\n        get gridBurredImg(): Map<string, cc.SpriteFrame>;\r\n    }\r\n}\r\n"
}