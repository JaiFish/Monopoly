{"version":3,"sources":["assets\\Script\\Class\\Panel_Bear.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAyC;AACzC,4DAAuD;AAEvD,+CAA8C;AAC9C,0CAAqC;AACrC,IAAK,SAGJ;AAHD,WAAK,SAAS;IACV,4BAAe,CAAA;IACf,wBAAW,CAAA;AACf,CAAC,EAHI,SAAS,KAAT,SAAS,QAGb;AACD;IAAwC,8BAAa;IAArD;QAAA,qEAoCC;QAjCG,YAAM,GAAW,CAAC,CAAC;QACnB,cAAQ,GAAW,CAAC,CAAA;;IAgCxB,CAAC;IA9Ba,2BAAM,GAAhB;QACI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAA;IAEtE,CAAC;IACK,+BAAU,GAAhB;;;;gBACI,sBAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;wBACrC,IAAI,IAAI,GAAG,WAAW,CAAC;4BACnB,IAAI,KAAI,CAAC,QAAQ,IAAI,SAAS,CAAC,KAAK,EAAE;gCAClC,aAAa,CAAC,IAAI,CAAC,CAAA;gCACnB,OAAO,EAAE,CAAA;6BACZ;wBACL,CAAC,EAAE,EAAE,CAAC,CAAA;oBACV,CAAC,CAAC,EAAA;;;KACL;IAED,yBAAI,GAAJ;QACI,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAA;QAC7B,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,kBAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAA;QAChF,OAAO,CAAC,GAAG,CAAC,kBAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxE,CAAC;IACS,2BAAM,GAAhB,UAAiB,EAAU;QACvB,IAAI,mBAAS,CAAC,SAAS,IAAI,qBAAS,CAAC,KAAK,EAAE;YACxC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAA;YACjB,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE;gBAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAA;gBAChF,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,kBAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAA;gBAChF,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;aAClB;SACJ;IACL,CAAC;IACL,iBAAC;AAAD,CApCA,AAoCC,CApCuC,uBAAa,GAoCpD","file":"","sourceRoot":"/","sourcesContent":["import AssetMng from '../Asset/AssetMng';\r\nimport ComponentBase from '../Data/base/ComponentBase';\r\nimport { GameEvent } from '../Enum/GameEvent';\r\nimport { GameState } from '../Enum/GameState';\r\nimport GameModle from '../GameModle';\r\nenum BearState {\r\n    Green = \"Green\",\r\n    Red = \"Red\",\r\n}\r\nexport default class Panel_Bear extends ComponentBase {\r\n    sprite: cc.Sprite\r\n    nowState: BearState;\r\n    tempDT: number = 0;\r\n    targetDT: number = 3\r\n\r\n    protected onLoad(): void {\r\n        this.sprite = cc.find(\"sprite\", this.node).getComponent(cc.Sprite)\r\n\r\n    }\r\n    async checkState() {\r\n        return new Promise<void>((resolve, reject) => {\r\n            let loop = setInterval(() => {\r\n                if (this.nowState == BearState.Green) {\r\n                    clearInterval(loop)\r\n                    resolve()\r\n                }\r\n            }, 50)\r\n        })\r\n    }\r\n\r\n    init(): void {\r\n        this.nowState = BearState.Red\r\n        this.sprite.spriteFrame = AssetMng.data_SprtieAtlas.get(\"Bear_\" + this.nowState)\r\n        console.log(AssetMng.data_SprtieAtlas.get(\"Bear_\" + this.nowState));\r\n    }\r\n    protected update(dt: number): void {\r\n        if (GameModle.gameState == GameState.Start) {\r\n            this.tempDT += dt\r\n            if (this.tempDT > this.targetDT) {\r\n                this.nowState = this.nowState == BearState.Red ? BearState.Green : BearState.Red\r\n                this.sprite.spriteFrame = AssetMng.data_SprtieAtlas.get(\"Bear_\" + this.nowState)\r\n                this.tempDT = 0\r\n            }\r\n        }\r\n    }\r\n}"]}